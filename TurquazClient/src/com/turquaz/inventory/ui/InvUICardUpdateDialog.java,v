head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.inventory.ui;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Onsel Armagan
 * @@version  $Id: InvUICardUpdateDialog.java,v 1.11 2005/08/30 12:09:53 onsel Exp $
 */
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.custom.TableEditor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;
import com.cloudgarden.resource.SWTResourceManager;
import org.eclipse.swt.widgets.Dialog;
import com.turquaz.inventory.InvKeys;
import com.turquaz.inventory.ui.InvUICardAdd;
import com.turquaz.accounting.AccKeys;
import com.turquaz.common.HashBag;
import com.turquaz.engine.bl.EngBLInventoryCards;
import com.turquaz.engine.bl.EngBLPermissions;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.InvLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.CurrencyText;
import com.turquaz.engine.ui.component.SaveDialogMenu;

import org.eclipse.swt.events.SelectionEvent;

import server.util.EngBLLogger;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/




public class InvUICardUpdateDialog extends Dialog implements SaveDialogInterface
{
	{
		//Register as a resource user - SWTResourceManager will
		//handle the obtaining and disposing of resources
		SWTResourceManager.registerResourceUser(this.getParent());
	}
	
	private InvUICardAdd compInvUICard;
	private SaveDialogMenu saveDialogMenu1;
	private Shell dialogShell;
	private Integer invCardId;
	private HashBag invCard;
	private boolean updated = false;

	public InvUICardUpdateDialog(Shell parent, int style, Integer invCardId)
	{
		super(parent, style);
		this.invCardId = invCardId;
	}

	/**
	 * Opens the Dialog Shell. Auto-generated code - any changes you make will disappear.
	 */
	public boolean open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			dialogShell.setText(InvLangKeys.TITLE_INV_CARD_UPDATE);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1LData.heightHint = 53;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			{
				compInvUICard = new InvUICardAdd(dialogShell, SWT.NULL);
				GridData compInvUICardLData = new GridData();
				compInvUICardLData.grabExcessHorizontalSpace = true;
				compInvUICardLData.horizontalAlignment = GridData.FILL;
				compInvUICardLData.grabExcessVerticalSpace = true;
				compInvUICardLData.verticalAlignment = GridData.FILL;
				compInvUICard.setLayoutData(compInvUICardLData);
				compInvUICard.setSize(new org.eclipse.swt.graphics.Point(
					603,
					306));
				compInvUICard.layout();
			}
			
			
			dialogShell.setSize(634, 368);
			GridLayout dialogShellLayout = new GridLayout(1, true);
			dialogShell.setLayout(dialogShellLayout);
			dialogShellLayout.marginWidth = 5;
			dialogShellLayout.marginHeight = 5;
			dialogShellLayout.numColumns = 1;
			dialogShellLayout.makeColumnsEqualWidth = true;
			dialogShellLayout.horizontalSpacing = 5;
			dialogShellLayout.verticalSpacing = 5;
			dialogShell.layout();
			Rectangle bounds = dialogShell.computeTrim(0, 0, 613, 348);
			dialogShell.setSize(753, 468);
			postInitGUI();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
			return updated;
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
			return true;
		}
	}

	/** Add your post-init code in here */
	public void postInitGUI()
	{
		try
		{
			
			EngUICommon.centreWindow(dialogShell);
			setButtonPermissions();
			HashMap argMap = new HashMap();
			argMap.put(InvKeys.INV_CARD_ID, invCardId);
			invCard = (HashBag) EngTXCommon.doSelectTX("Inv_initializeInventoryCard", argMap);
			String invCardCode = (String) invCard.get(InvKeys.INV_CARD_CODE);
			String invCardName = (String) invCard.get(InvKeys.INV_CARD_NAME);
			String invCardDefinition = (String) invCard.get(InvKeys.INV_CARD_DEFINITION);
			BigDecimal discountRate = (BigDecimal) invCard.get(InvKeys.INV_DISCOUNT_RATE);
			BigDecimal vatRate = (BigDecimal) invCard.get(InvKeys.INV_VAT_RATE);
			BigDecimal vatSpecialRate = (BigDecimal) invCard.get(InvKeys.INV_VAT_SPECIAL_RATE);
			Integer maxAmount = (Integer) invCard.get(InvKeys.INV_MAX_AMOUNT);
			Integer minAmount = (Integer) invCard.get(InvKeys.INV_MIN_AMOUNT);
			BigDecimal specVatForEach = (BigDecimal) invCard.get(InvKeys.INV_SPECIAL_VAT_FOR_EACH);
			Boolean isSpecVatForEach = (Boolean) invCard.get(InvKeys.INV_IS_SPEC_VAT_FOR_EACH);
			System.out.println(invCardCode);
			compInvUICard.getTxtInvCardCode().setText(invCardCode);
			compInvUICard.getTxtInvCardDefinition().setText(invCardDefinition);
			compInvUICard.getTxtInvCardDiscount().setText(discountRate.intValue());
			compInvUICard.getTxtInvCardName().setText(invCardName);
			compInvUICard.getTxtInvCardVat().setText(vatRate.intValue());
			compInvUICard.getTxtnumInvCardMax().setText(maxAmount.intValue());
			compInvUICard.getTxtnumInvCardMin().setText(minAmount.intValue());
			compInvUICard.getNumTextSpecailVATPercent().setText(vatSpecialRate.intValue());
			compInvUICard.getDecTextSpecialVatAmount().setText(specVatForEach);
			compInvUICard.getRadioSpecialVatAmount().setSelection(isSpecVatForEach.booleanValue());
			compInvUICard.getRadioSpecialVatPercent().setSelection(!isSpecVatForEach.booleanValue());
			fillUnits();
			fillGroups();
			fillPrices();
			fillInvAccounts();
		}
		catch (Exception ex)
		{
			EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	public void setButtonPermissions()
	{
		int level =0;
		
		try
		{
		level = EngBLPermissions.getPermission(compInvUICard.getClass().getName());
		}
		catch(Exception ex)
		{
			 EngBLLogger.log(this.getClass(),ex,getParent());
		}
		
		
	}

	public void fillInvAccounts() throws Exception
	{
		HashMap argMap = new HashMap();
		argMap.put(InvKeys.INV_CARD_ID,invCardId);
		HashBag invAccountBag = (HashBag) EngTXCommon.doSelectTX("Inv_getInvAccountingAccs", argMap);
		
		HashMap invAccounts=(HashMap)invAccountBag.get(InvKeys.INV_ACCOUNTS);
		for (int k = 0; k < invAccounts.size(); k++)
		{
			HashMap invAcc = (HashMap) invAccounts.get(new Integer(k));
			TableItem[] invAccs = compInvUICard.getTableInvAccounts().getItems();
			HashMap accountMap=(HashMap)invAcc.get(AccKeys.ACC_ACCOUNT);
			HashMap typeMap=(HashMap)invAcc.get(InvKeys.INV_ACC_TYPE);
			Integer typeId=(Integer)typeMap.get(InvKeys.INV_ACC_TYPE_ID);
			for (int i = 0; i < invAccs.length; i++)
			{
				InvUIInvAccountingAccTableRow row = (InvUIInvAccountingAccTableRow) invAccs[i].getData();
				HashMap inventoryAcc = (HashMap) row.getDBObject();
				HashMap inventoryAccType=(HashMap)inventoryAcc.get(InvKeys.INV_ACC_TYPE);
				Integer accTypeId=(Integer)inventoryAccType.get(InvKeys.INV_ACC_TYPE_ID);
				
				if (typeId.intValue() == accTypeId.intValue())
				{
					inventoryAcc.put(AccKeys.ACC_ACCOUNT,accountMap);
					inventoryAcc.put(InvKeys.INV_CARD,invCard);
					compInvUICard.rowList.taskChanged(row);
				}
			}
		}
	}

	public void fillPrices() throws Exception
	{
		
		HashMap argMap = new HashMap();
		argMap.put(InvKeys.INV_CARD_ID,invCardId);
		HashBag invPriceBag = (HashBag) EngTXCommon.doSelectTX("Inv_getInvCardPrices", argMap);

		HashMap invPrices=(HashMap)invPriceBag.get(InvKeys.INV_CARD_PRICES);
		
		compInvUICard.setAllPrices((List)invPrices.get(InvKeys.INV_CARD_PRICES));
		compInvUICard.fillPriceList();
	}

	public void fillGroups() throws Exception
	{
		HashMap argMap = new HashMap();
		argMap.put(InvKeys.INV_CARD_ID,invCardId);
		HashBag invPriceBag = (HashBag) EngTXCommon.doSelectTX("Inv_getInvCardGroups", argMap);
		
		HashMap invGroups=(HashMap)invPriceBag.get(InvKeys.INV_CARD_GROUPS);
		HashMap registeredGroups = compInvUICard.getCompInvCardGroups().getRegisteredGroups();
		for(int k=0; k<invGroups.size(); k++)
		{
			HashMap cardGroup = (HashMap)invGroups.get(new Integer(k));
			HashMap invGroupMap=(HashMap)cardGroup.get(InvKeys.INV_GROUP);
			Integer parentGroupId=(Integer)invGroupMap.get(InvKeys.INV_PARENT_GROUP_ID);
			registeredGroups.put(parentGroupId, invGroupMap);
		}
		compInvUICard.getCompInvCardGroups().setRegisteredGroups(registeredGroups);
	}

	public void fillUnits() throws Exception
	{
		HashMap invCardUnits=(HashMap)invCard.get(InvKeys.INV_CARD_UNITS);
		Table tableRegisteredUnits = compInvUICard.getTableInvCardAddRegisteredUnits();
		for(int k=0; k<invCardUnits.size(); k++)
		{
			HashMap cardUnit = (HashMap)invCardUnits.get(new Integer(k));
			HashMap invUnit=(HashMap)cardUnit.get(InvKeys.INV_UNIT);
			String unitName = (String)invUnit.get(InvKeys.INV_UNIT_NAME);
			if (((BigDecimal)cardUnit.get(InvKeys.INV_CARD_UNIT_FACTOR)).compareTo(new BigDecimal(1)) == 0)
			{
				compInvUICard.getComboInvCardUnits().setText(unitName);
			}
			else
			{
				
				TableItem registeredItem = new TableItem(tableRegisteredUnits, SWT.NULL);
				registeredItem.setText(unitName);
				registeredItem.setData(invUnit.get(InvKeys.INV_UNIT_ID));
				TableEditor editor = new TableEditor(tableRegisteredUnits);
				editor.grabHorizontal = true;
				CurrencyText nText = new CurrencyText(tableRegisteredUnits, SWT.NONE);
				nText.setText((BigDecimal)cardUnit.get(InvKeys.INV_CARD_UNIT_FACTOR));
				editor.setEditor(nText, registeredItem, 1);
				compInvUICard.mapEditorsTableInvCardAddRegisteredUnits.put(unitName, editor);
				removeRegisteredUnit(unitName);
			}
		}
	}

	public void removeRegisteredUnit(String unitName)
	{
		TableItem items[] = compInvUICard.getTableInvCardAddAllUnits().getItems();
		for (int i = 0; i < items.length; i++)
		{
			if (items[i].getText().equals(unitName))
			{
				compInvUICard.getTableInvCardAddAllUnits().remove(i);
				break;
			}
		}
	}

	public void save()
	{
		try
		{
			if (compInvUICard.verifyFields(false))
			{
				updated = true;
				// Update Inventory Card Fields
				
				HashMap argMap=new HashMap();
				argMap.put(InvKeys.INV_CARD_ID,invCardId);
				argMap.put(InvKeys.INV_CARD_CODE,compInvUICard.getTxtInvCardCode().getText().trim());
				argMap.put(InvKeys.INV_CARD_NAME,compInvUICard.getTxtInvCardName().getText().trim());
				argMap.put(InvKeys.INV_CARD_DEFINITION,compInvUICard.getTxtInvCardDefinition().getText().trim());
				argMap.put(InvKeys.INV_CARD_MIN_AMOUNT,compInvUICard.getTxtnumInvCardMin().getIntegerValue());
				argMap.put(InvKeys.INV_CARD_MAX_AMOUNT,compInvUICard.getTxtnumInvCardMax().getIntegerValue());
				argMap.put(InvKeys.INV_CARD_VAT_RATE,compInvUICard.getTxtInvCardVat().getIntegerValue());
				argMap.put(InvKeys.INV_CARD_DISCOUNT_RATE,compInvUICard.getTxtInvCardDiscount().getIntegerValue());
				argMap.put(InvKeys.INV_CARD_SPECIAL_VAT_RATE,compInvUICard.getNumTextSpecailVATPercent().getIntegerValue());
				argMap.put(InvKeys.INV_CARD_SPECIAL_FOR_EACH,compInvUICard.getDecTextSpecialVatAmount().getBigDecimalValue());
				argMap.put(InvKeys.INV_CARD_IS_SPEC_AMOUNT,new Boolean(compInvUICard.getRadioSpecialVatAmount().getSelection()));
				argMap.put(InvKeys.INV_CARD_INV_GROUPS,compInvUICard.getCompInvCardGroups().getRegisteredGroups());
				argMap.put(InvKeys.INV_CARD_UNITS,compInvUICard.getInvUnits());
				argMap.put(InvKeys.INV_CARD_PRICES,compInvUICard.getInvPrices());
				argMap.put(InvKeys.INV_CARD_ACCOUNTS,compInvUICard.getInvAccounts());
				
				EngTXCommon.doTransactionTX("Inv_updateInventoryCard",argMap);
				EngBLInventoryCards.RefreshContentAsistantMap();
				EngUICommon.showUpdatedSuccesfullyMessage(getParent());
				this.dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	public void delete()
	{
		try
		{
			boolean okToDelete=EngUICommon.okToDelete(getParent());
			if (!okToDelete)
				return;
			updated=true;
			HashMap argMap=new HashMap();
			argMap.put(InvKeys.INV_CARD_ID,invCardId);				
			EngTXCommon.doTransactionTX("Inv_deleteInventoryCard",argMap);				
			EngBLInventoryCards.RefreshContentAsistantMap();
			EngUICommon.showDeletedSuccesfullyMessage(getParent());
			this.dialogShell.dispose();
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
			dialogShell.close();
		}
	}

	/** Auto-generated event handler method */
	protected void toolUpdateWidgetSelected(SelectionEvent evt)
	{
		save();
	}

	/** Auto-generated event handler method */
	protected void toolDeleteWidgetSelected(SelectionEvent evt)
	{
		delete();
	}

	

	public void cancel() {
		dialogShell.close();
	}

	public String getSaveComposite() {
		
	return  InvUICardAdd.class.getName();
		
	}

	public void print() {
		
		
	}
}@
