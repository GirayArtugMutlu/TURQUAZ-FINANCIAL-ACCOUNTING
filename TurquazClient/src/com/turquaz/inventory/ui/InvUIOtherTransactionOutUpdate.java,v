head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.inventory.ui;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;

import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionAdapter;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.common.HashBag;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.lang.InvLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.inventory.InvKeys;

import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/

// TODO yazici olduu için kisayollar yapilamadi
public class InvUIOtherTransactionOutUpdate extends org.eclipse.swt.widgets.Dialog {

	private Shell dialogShell;
	private ToolItem toolUpdate;
    private InvUIOtherTransactionOut compTransOut;
    private ToolItem toolCancel;
	private ToolItem toolPrint;
	private ToolItem toolDelete;
	private ToolBar toolBar1;
    private boolean updated = false;
    private Integer transId ; 
	/**
	* Auto-generated main method to display this 
	* org.eclipse.swt.widgets.Dialog inside a new Shell.
	*/

	public InvUIOtherTransactionOutUpdate(Shell parent, int style, Integer trans) {
		super(parent, style);
        this.transId = trans;
	}

	public boolean open() {
		try {
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);

                {
                    //Register as a resource user - SWTResourceManager will
                    //handle the obtaining and disposing of resources
                    SWTResourceManager.registerResourceUser(dialogShell);
                }


			dialogShell.setLayout(new GridLayout());
            //START >>  toolBar1
            GridData toolBar1LData = new GridData();
            toolBar1LData.horizontalAlignment = GridData.FILL;
            toolBar1LData.grabExcessHorizontalSpace = true;
            toolBar1 = new ToolBar(dialogShell, SWT.NONE);
            toolBar1.setLayoutData(toolBar1LData);
            //START >>  toolUpdate
            toolUpdate = new ToolItem(toolBar1, SWT.NONE);
            toolUpdate.setText(EngLangCommonKeys.STR_UPDATE);
            toolUpdate.setImage(SWTResourceManager.getImage("icons/save_edit.gif"));
            toolUpdate.addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent evt) {
                    update();
                }
            });
            //END <<  toolUpdate
            //START >>  toolDelete
            toolDelete = new ToolItem(toolBar1, SWT.NONE);
            toolDelete.setText(EngLangCommonKeys.STR_DELETE);
            toolDelete.setImage(SWTResourceManager.getImage("icons/Delete16.gif"));
            toolDelete.addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent evt) {
                    delete();
                }
            });
            //END <<  toolDelete
            //START >>  toolPrint
            toolPrint = new ToolItem(toolBar1, SWT.NONE);
            toolPrint.setText(EngLangCommonKeys.STR_PRINT);
            toolPrint.setImage(SWTResourceManager.getImage("gfx/print.gif"));
            toolPrint.addSelectionListener(new SelectionAdapter()
			{
				public void widgetSelected(SelectionEvent evt)
				{
					try
					{
						//XXX should be implemented..
					}
					catch (Exception ex)
					{
						EngBLLogger.log(this.getClass(), ex, getParent());
					}
				}
			});
            //END <<  toolPrint
            //START >>  toolCancel
            toolCancel = new ToolItem(toolBar1, SWT.NONE);
            toolCancel.setText(EngLangCommonKeys.STR_CANCEL);
            toolCancel.setImage(SWTResourceManager.getImage("icons/cancel.jpg"));
            toolCancel.addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent evt) {
                    dialogShell.close();
                }
            });
            //END <<  toolCancel
            //END <<  toolBar1
            //START >>  compTransOut
            compTransOut = new InvUIOtherTransactionOut(dialogShell, SWT.NONE);
;
            GridLayout compTransOutLayout = new GridLayout();
            compTransOutLayout.numColumns = 2;
            GridData compTransOutLData = new GridData();
            compTransOutLData.grabExcessHorizontalSpace = true;
            compTransOutLData.horizontalAlignment = GridData.FILL;
            compTransOutLData.verticalAlignment = GridData.FILL;
            compTransOutLData.grabExcessVerticalSpace = true;
            compTransOut.setLayoutData(compTransOutLData);
            compTransOut.setLayout(compTransOutLayout);
            //END <<  compTransOut
			dialogShell.layout();
			dialogShell.pack();
			dialogShell.setSize(475, 299);
			dialogShell.setText(InvLangKeys.TITLE_INV_TRANS_OUT_UPDATE);
            postInitGui();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed()) {
				if (!display.readAndDispatch())
					display.sleep();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
        
        return updated;
	}
    
    public void postInitGui()
    {
        try
        {
			EngUICommon.centreWindow(dialogShell);
            if (transId == null)
                return;
            
            HashMap argMap=new HashMap();
            argMap.put(InvKeys.INV_TRANS_ID,transId);
            
            HashBag transBag=(HashBag)EngTXCommon.doSelectTX("Inv_getTransactionInfo",argMap);
            
            compTransOut.getTxtDocNo().setText((String)transBag.get(EngKeys.DOCUMENT_NO));
            compTransOut.getInventoryPicker().setText((String)transBag.get(InvKeys.INV_CARD_CODE));
            compTransOut.getDatePicker().setDate((Date)transBag.get(EngKeys.DATE));
            compTransOut.getTxtAmount().setText((BigDecimal)transBag.get(EngKeys.AMOUNT_OUT));
            compTransOut.getComboUnits().setText((String)transBag.get(InvKeys.INV_UNIT_NAME));
            compTransOut.getComboUnits().setData((String)transBag.get(InvKeys.INV_UNIT_NAME), transBag.get(InvKeys.INV_UNIT_ID));
            compTransOut.getTxtDefinition().setText((String)transBag.get(EngKeys.DEFINITION));
            compTransOut.getComboWareHouse().setText((String)transBag.get(InvKeys.INV_WAREHOUSE_NAME));
            compTransOut.getComboWareHouse().setData((String)transBag.get(InvKeys.INV_WAREHOUSE_NAME),transBag.get(InvKeys.INV_WAREHOUSE_ID));
            
            
        }
        catch (Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
    }
    
    public void update ()
    {
        try
        {
            if (transId == null)
                return;
            if (compTransOut.verifyFields())
            {
                updated = true;
                //update the transaction info 
               
                HashMap argMap=new HashMap();
               
                argMap.put(InvKeys.INV_TRANS_ID,transId);
                argMap.put(InvKeys.INV_CARD_ID,compTransOut.getInventoryPicker().getId());
                argMap.put(InvKeys.INV_WAREHOUSE_ID,compTransOut.getComboWareHouse().getData(compTransOut.getComboWareHouse().getText()));
                argMap.put(EngKeys.AMOUNT_IN,null);
                argMap.put(EngKeys.AMOUNT_OUT,compTransOut.getTxtAmount().getBigDecimalValue());
                argMap.put(EngKeys.DEFINITION,compTransOut.getTxtDefinition().getText());
                argMap.put(EngKeys.DATE,compTransOut.getDatePicker().getDate());
                argMap.put(EngKeys.DOCUMENT_NO,compTransOut.getTxtDocNo().getText());
                
                HashBag resultBag=(HashBag)EngTXCommon.doTransactionTX("Inv_updateOtherTransaction",argMap);
                             
                EngUICommon.showUpdatedSuccesfullyMessage(getParent());
                this.dialogShell.close();
            }
        }
        catch (Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
        
    }
    
    public void delete ()
    {
        try
        {
        boolean okToDelete=EngUICommon.okToDelete(getParent());
        if (okToDelete)
        {
            updated = true;
         
            HashMap argMap=new HashMap();
            argMap.put(InvKeys.INV_TRANS_ID,transId);
            EngTXCommon.doTransactionTX("Inv_deleteOtherTransaction",argMap);
            EngUICommon.showDeletedSuccesfullyMessage(getParent());
            dialogShell.close();
        }
        
        }
        catch (Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
    }
}
@
