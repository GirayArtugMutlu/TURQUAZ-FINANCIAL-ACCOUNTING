head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.inventory.ui;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Onsel Armagan
 * @@version  $Id: InvUIWarehouseUpdate.java,v 1.6 2005/08/26 15:51:08 onsel Exp $
 */
import java.util.HashMap;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Shell;
import com.turquaz.common.HashBag;

import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.InvLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import com.turquaz.inventory.InvKeys;
import com.turquaz.inventory.ui.InvUIWarehouseAdd;

import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;


import org.eclipse.swt.SWT;

import server.util.EngBLLogger;

import com.cloudgarden.resource.SWTResourceManager;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/

// TODO test edilmedi


public class InvUIWarehouseUpdate extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface
{
	private InvUIWarehouseAdd compInvUIWarehouse;
	private Shell dialogShell;
	private SaveDialogMenu saveDialogMenu1;
	private Integer warehouseId;

	public InvUIWarehouseUpdate(Shell parent, int style, Integer whId)
	{
		super(parent, style);
		warehouseId = whId;
	}

	/**
	 * Opens the Dialog Shell. Auto-generated code - any changes you make will disappear.
	 */
	public void open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				//Register as a resource user - SWTResourceManager will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(dialogShell);
			}
			dialogShell.setText(InvLangKeys.TITLE_WAREHOUSE_UPDATE);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			
		
				compInvUIWarehouse = new InvUIWarehouseAdd(dialogShell, SWT.BORDER);
			dialogShell.setSize(new org.eclipse.swt.graphics.Point(518, 428));
			final org.eclipse.swt.graphics.Image toolUpdateImage = new org.eclipse.swt.graphics.Image(Display.getDefault(), getClass()
					.getClassLoader().getResourceAsStream("icons/save_edit.gif")); //$NON-NLS-1$
			final org.eclipse.swt.graphics.Image toolDeleteImage = new org.eclipse.swt.graphics.Image(Display.getDefault(), getClass()
					.getClassLoader().getResourceAsStream("icons/delete_edit.gif")); //$NON-NLS-1$
			GridData compInvUIWarehouseLData = new GridData();
			compInvUIWarehouseLData.verticalAlignment = GridData.FILL;
			compInvUIWarehouseLData.horizontalAlignment = GridData.FILL;
			compInvUIWarehouseLData.widthHint = -1;
			compInvUIWarehouseLData.heightHint = -1;
			compInvUIWarehouseLData.horizontalIndent = 0;
			compInvUIWarehouseLData.horizontalSpan = 1;
			compInvUIWarehouseLData.verticalSpan = 1;
			compInvUIWarehouseLData.grabExcessHorizontalSpace = true;
			compInvUIWarehouseLData.grabExcessVerticalSpace = true;
			compInvUIWarehouse.setLayoutData(compInvUIWarehouseLData);
			compInvUIWarehouse.setSize(new org.eclipse.swt.graphics.Point(504, 371));
			compInvUIWarehouse.layout();
			GridLayout dialogShellLayout = new GridLayout(1, true);
			dialogShell.setLayout(dialogShellLayout);
			dialogShellLayout.marginWidth = 5;
			dialogShellLayout.marginHeight = 5;
			dialogShellLayout.numColumns = 1;
			dialogShellLayout.makeColumnsEqualWidth = true;
			dialogShellLayout.horizontalSpacing = 5;
			dialogShellLayout.verticalSpacing = 5;
			dialogShell.layout();
			dialogShell.addDisposeListener(new DisposeListener()
			{
				public void widgetDisposed(DisposeEvent e)
				{
					toolUpdateImage.dispose();
					toolDeleteImage.dispose();
				}
			});
			Rectangle bounds = dialogShell.computeTrim(0, 0, 518, 428);
			dialogShell.setSize(bounds.width, bounds.height);
			postInitGUI();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
		}
	}

	/** Add your post-init code in here */
	public void postInitGUI()
	{
		
		
		try{
		
     
        
        HashMap argMap = new HashMap();
        argMap.put(InvKeys.INV_WAREHOUSE_ID,warehouseId);
        
        
        HashBag resultBag = (HashBag)EngTXCommon.doSelectTX("Inv_getWarehouseInfo",argMap);
        
		compInvUIWarehouse.getTxtTelephone().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_TEL));
		compInvUIWarehouse.getTxtWarehouseAdres().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_ADDRESS));
		compInvUIWarehouse.getTxtWarehouseCity().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_CITY));
		compInvUIWarehouse.getTxtWarehouseName().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_NAME));
		compInvUIWarehouse.getTxtWarehouseDescription().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_DESC));
		compInvUIWarehouse.getTxtWarehouseCode().setText((String)resultBag.get(InvKeys.INV_WAREHOUSE_CODE));
		Point parentLocation = this.getParent().getLocation();
		Point parentSize = this.getParent().getSize();
		Point dialogSize = dialogShell.getSize();
		int location_X = (parentLocation.x + parentSize.x) / 2 - (dialogSize.x / 2);
		int location_Y = (parentLocation.y + parentSize.y) / 2 - (dialogSize.y / 2);
		dialogShell.setLocation(location_X, location_Y);
        }
        catch (Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
	}

	/** Auto-generated event handler method */
	public void save()
	{
		try
		{
			if (!compInvUIWarehouse.verifyFields())
				return;
			
			HashMap argMap=new HashMap();
			argMap.put(InvKeys.INV_WAREHOUSE_ID,warehouseId);
			argMap.put(InvKeys.INV_WAREHOUSE_NAME,compInvUIWarehouse.getTxtWarehouseName().getText().trim());
			argMap.put(InvKeys.INV_WAREHOUSE_CODE,compInvUIWarehouse.getTxtWarehouseCode().getText().trim());
			argMap.put(InvKeys.INV_WAREHOUSE_DESC,compInvUIWarehouse.getTxtWarehouseDescription().getText().trim());
			argMap.put(InvKeys.INV_WAREHOUSE_ADDRESS,compInvUIWarehouse.getTxtWarehouseAdres().getText().trim());
			argMap.put(InvKeys.INV_WAREHOUSE_TEL,compInvUIWarehouse.getTxtTelephone().getText().trim());
			argMap.put(InvKeys.INV_WAREHOUSE_CITY,compInvUIWarehouse.getTxtWarehouseCity().getText().trim());
			
			EngTXCommon.doTransactionTX("Inv_updateWarehouse",argMap);
			EngUICommon.showUpdatedSuccesfullyMessage(getParent());
			dialogShell.close();
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	/** Auto-generated event handler method */
	public void delete()
	{
		try
		{
			boolean okToDelete=EngUICommon.okToDelete(getParent());
			if (okToDelete)
			{
				// if the warehouse card contains transactions
				HashMap argMap=new HashMap();
				argMap.put(InvKeys.INV_WAREHOUSE_ID,warehouseId);
				EngTXCommon.doTransactionTX("Inv_deleteWarehouse",argMap);
				EngUICommon.showDeletedSuccesfullyMessage(getParent());
				this.dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}



	public void cancel() {

		dialogShell.close();
	}

	public String getSaveComposite() {
		return InvUIWarehouseAdd.class.getName();
		
	}

	public void print() {
		
		
	}
}@
