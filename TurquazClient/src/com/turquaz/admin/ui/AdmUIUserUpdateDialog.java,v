head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.40;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.admin.ui;

import java.util.HashMap;
import java.util.List;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.admin.AdmKeys;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;



/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/
/**
 * @@author hakankaynar
 * */
public class AdmUIUserUpdateDialog extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface
{
	private Shell dialogShell;
	private AdmUIUserAdd compUserAdd;
    private HashMap userMap;
    private SaveDialogMenu saveDialogMenu1;

	private boolean updated = false;

	public AdmUIUserUpdateDialog(Shell parent, int style, HashMap userMap)
	{
		super(parent, style);
        this.userMap=userMap;
	}

	public boolean open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				//Register as a resource user - SWTResourceManager will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(dialogShell);
			}
			dialogShell.setLayout(new GridLayout());
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			//START >> compUserAdd
			
				compUserAdd = new AdmUIUserAdd(dialogShell, SWT.NONE);
			GridLayout compAddUserLayout = new GridLayout();
			GridData compAddUserLData = new GridData();
			compAddUserLData.grabExcessHorizontalSpace = true;
			compAddUserLData.grabExcessVerticalSpace = true;
			compAddUserLData.horizontalAlignment = GridData.FILL;
			compAddUserLData.verticalAlignment = GridData.FILL;
			compUserAdd.setLayoutData(compAddUserLData);
			compAddUserLayout.makeColumnsEqualWidth = true;
			//END << compUserAdd
			dialogShell.layout();
			dialogShell.pack();
			dialogShell.setSize(668, 511);
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			PostInitGui();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
			return updated;
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
			return true;
		}
	}

	public void PostInitGui()
	{
		compUserAdd.getTxtUsername().setEnabled(false);
		compUserAdd.getTxtUsername().setEditable(false);
		compUserAdd.getTxtUsername().setForeground(SWTResourceManager.getColor(255, 255, 255));
		compUserAdd.getTxtUsername().setText(userMap.get(AdmKeys.ADM_USER_NAME).toString());
		compUserAdd.getTxtDescription().setText(userMap.get(AdmKeys.ADM_USER_DESCRIPTION).toString());
		compUserAdd.getTxtPassword().setText(userMap.get(AdmKeys.ADM_USER_PASSWORD).toString());
		compUserAdd.getTxtRePassword().setText(userMap.get(AdmKeys.ADM_USER_PASSWORD).toString());
		compUserAdd.getTxtRealName().setText(userMap.get(AdmKeys.ADM_USER_REAL_NAME).toString());
		
        List userGroups=(List)userMap.get(AdmKeys.ADM_USER_GROUPS);
		if(userGroups!=null)
		{
			for (int k=0; k<userGroups.size();k++)
			{
				Integer groupId=(Integer)userGroups.get(k);
				compUserAdd.getRegisteredGroups().RegisterGroup(groupId);
			}
		}	
	}

	public void delete()
	{
		try
		{
			boolean delete = EngUICommon.okToDelete(this.getParent()); //$NON-NLS-1$
			if (delete)
			{
				updated = true;
				EngTXCommon.doTransactionTX("Adm_deleteUser",userMap);
				EngUICommon.showMessageBox(this.getParent(),EngLangCommonKeys.MSG_DELETED_SUCCESS); //$NON-NLS-1$
				this.dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	public void save()
	{
		try
		{
			if (compUserAdd.verifyFields())
			{
				updated = true;
				
				HashMap argMap=new HashMap();
				argMap.put(AdmKeys.ADM_PASSWORD,compUserAdd.getTxtPassword().getText().trim());
				argMap.put(AdmKeys.ADM_REALNAME,compUserAdd.getTxtRealName().getText().trim());
				argMap.put(EngKeys.DESCRIPTION,compUserAdd.getTxtDescription().getText().trim());
				argMap.put(AdmKeys.ADM_USER_ID,userMap.get(AdmKeys.ADM_USER_ID));
				argMap.put(AdmKeys.ADM_USER_GROUPS,compUserAdd.getUserGroups());
				
				EngTXCommon.doTransactionTX("Adm_updateUser",argMap);
				EngUICommon.showMessageBox(this.getParent(),EngLangCommonKeys.MSG_UPDATED_SUCCESS); //$NON-NLS-1$
				dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	

	public void cancel() {
		dialogShell.close();	
	}

	public String getSaveComposite() {
		return AdmUIUserAdd.class.getName();
	}

	public void print() {
		// TODO Auto-generated method stub
		
	}
}@
