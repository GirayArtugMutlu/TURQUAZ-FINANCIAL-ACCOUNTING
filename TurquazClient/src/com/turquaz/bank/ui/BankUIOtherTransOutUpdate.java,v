head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.48;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.bank.ui;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.accounting.AccKeys;
import com.turquaz.bank.BankKeys;
import com.turquaz.common.HashBag;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
* 
* 
*/
public class BankUIOtherTransOutUpdate extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface
{
	private Shell dialogShell;
	private BankUIOtherTransIn compCashTrans;
	private Integer transBillId;
	private SaveDialogMenu saveDialogMenu1;
	boolean isUpdated = false;

	public BankUIOtherTransOutUpdate(Shell parent, int style,Integer transBill)
	{
		super(parent, style);
		this.transBillId = transBill;
	}

	public boolean open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				//Register as a resource user - SWTResourceManager will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(dialogShell);
			}
			dialogShell.setLayout(new GridLayout());
			dialogShell.layout();
			dialogShell.pack();
			dialogShell.setSize(555, 300);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			{
			
					compCashTrans = new BankUIOtherTransIn(dialogShell, SWT.NONE);
				GridData compCashTransLData = new GridData();
				compCashTransLData.grabExcessHorizontalSpace = true;
				compCashTransLData.horizontalAlignment = GridData.FILL;
				compCashTransLData.verticalAlignment = GridData.FILL;
				compCashTransLData.grabExcessVerticalSpace = true;
				compCashTrans.setLayoutData(compCashTransLData);
			}
			postInitGUI();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
			return isUpdated;
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
			return false;
		}
	}

	public void postInitGUI()
	{
		EngUICommon.centreWindow(dialogShell);
		try{
			HashMap argMap = new HashMap();
			argMap.put(BankKeys.BANK_TRANS_BILL_ID,transBillId);
			HashBag result = (HashBag)EngTXCommon.doSelectTX("Bnk_getTransactionInfo",argMap);
			
		
		compCashTrans.getTxtDocNo().setText(result.get(EngKeys.DOCUMENT_NO).toString());
		compCashTrans.getTxtDefinition().setText(result.get(EngKeys.DEFINITION).toString());
		compCashTrans.getDatePick().setDate((Date)result.get(EngKeys.DATE));
		
		compCashTrans.getComboCurrencyType().setText((String)result.get(EngKeys.CURRENCY_ABBR));
		
		HashMap rowMap = (HashMap)result.get(BankKeys.BANK_TRANSACTION_ROWS);
		for(int i=0;i<rowMap.size();i++)
		{
			HashMap rowInfo = (HashMap)rowMap.get(new Integer(i));
			compCashTrans.getTxtBankCard().setText(rowInfo.get(BankKeys.BANK_CODE).toString());
			
			BigDecimal creditAmount = (BigDecimal)rowInfo.get(EngKeys.CREDIT_AMOUNT);
			BigDecimal deptAmount = (BigDecimal)rowInfo.get(EngKeys.DEPT_AMOUNT);
				
			compCashTrans.getCurAmount().setText(creditAmount);
			
			if (creditAmount.compareTo(deptAmount) < 1)
			{
				compCashTrans.getCurAmount().setText(deptAmount);
			}			
			
			
			
		}
		
		compCashTrans.getTxtAccountPicker().setText(result.get(AccKeys.ACC_ACCOUNT_CODE).toString()); //$NON-NLS-1$ //$NON-NLS-2$
			
		
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
	}

	public void save()
	{
		try
		{
			if (compCashTrans.verifyFields())
			{
				HashMap argMap=new HashMap();
				
				argMap.put(BankKeys.BANK_TRANS_BILL_ID,transBillId);
				argMap.put(BankKeys.BANK_ID,compCashTrans.getTxtBankCard().getBankId());
				argMap.put(AccKeys.ACC_ACCOUNT_ID,compCashTrans.getTxtAccountPicker().getId());
				argMap.put(EngKeys.TOTAL_AMOUNT,compCashTrans.getCurAmount().getBigDecimalValue());
				argMap.put(EngKeys.TRANS_DATE,compCashTrans.getDatePick().getDate());
				argMap.put(EngKeys.DEFINITION,compCashTrans.getTxtDefinition().getText().trim());
				argMap.put(EngKeys.DOCUMENT_NO,compCashTrans.getTxtDocNo().getText().trim());
				argMap.put(EngKeys.CURRENCY_ID,compCashTrans.getComboCurrencyType().getData(compCashTrans.getComboCurrencyType().getText()));				
				
				EngTXCommon.doTransactionTX("Bnk_updateOtherTransactionBill",argMap);
				EngUICommon.showUpdatedSuccesfullyMessage(getParent());
				isUpdated = true;
				dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	public void delete()
	{
		try
		{
			if (EngUICommon.okToDelete(getParent()))
			{
				HashMap argMap=new HashMap();
				argMap.put(BankKeys.BANK_TRANS_BILL_ID,transBillId);
				EngTXCommon.doTransactionTX("Bnk_deleteTransaction",argMap);
				EngUICommon.showDeletedSuccesfullyMessage(getParent());
				isUpdated = true;
				dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
	}

	

	public void cancel() {
		dialogShell.close();
		
	}

	public String getSaveComposite() {
		
		return BankUIOtherTransIn.class.getName();
		
	}

	public void print() {
		// TODO Auto-generated method stub
		
	}
}@
