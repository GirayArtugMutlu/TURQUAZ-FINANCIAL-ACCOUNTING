head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.48;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.bank.ui;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Ceday
 * @@version  $Id: BankUIBankCardUpdate.java,v 1.10 2005/08/29 13:13:54 cem Exp $
 */
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Shell;
import com.turquaz.accounting.ui.comp.AccountPickerLeaf;
import com.turquaz.admin.AdmKeys;
import com.turquaz.bank.BankKeys;
import com.turquaz.bank.ui.BankUIBankCardAdd;
import com.turquaz.common.HashBag;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.bl.EngBLBankCards;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.BankLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import org.eclipse.swt.layout.GridData;
import com.cloudgarden.resource.SWTResourceManager;
import org.eclipse.swt.SWT;
import server.util.EngBLLogger;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/
public class BankUIBankCardUpdate extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface
{
	private Shell dialogShell;
	private SaveDialogMenu saveDialogMenu1;
	private Integer bankCardId;
	private BankUIBankCardAdd compBankCard;
	private boolean updated = false;

	public BankUIBankCardUpdate(Shell parent, int style, Integer bankId)
	{
		super(parent, style);
		bankCardId = bankId;
	}

	/**
	 * Opens the Dialog Shell. Auto-generated code - any changes you make will disappear.
	 */
	public boolean open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				//Register as a resource user - SWTResourceManager will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(dialogShell);
			}
			dialogShell.setSize(487, 229);
			
			
			
			GridLayout dialogShellLayout = new GridLayout(1, true);
			dialogShell.setText(BankLangKeys.TITLE_BANK_CARD_UPDATE);
			dialogShell.setLayout(dialogShellLayout);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			{
				
					compBankCard = new BankUIBankCardAdd(dialogShell, SWT.NONE);
		
				
				compBankCard.setSize(new org.eclipse.swt.graphics.Point(476, 155));
				GridData compBankCardLData = new GridData();
				compBankCardLData.verticalAlignment = GridData.FILL;
				compBankCardLData.horizontalAlignment = GridData.FILL;
				compBankCardLData.grabExcessHorizontalSpace = true;
				compBankCardLData.grabExcessVerticalSpace = true;
				compBankCard.setLayoutData(compBankCardLData);
				compBankCard.getComboCurrency().setSize(232, 21);
				compBankCard.getTxtBankAccountNo().setSize(248, 21);
				compBankCard.getTxtBankBranchName().setSize(248, 21);
				compBankCard.getComboCurrency().setLocation(new org.eclipse.swt.graphics.Point(105, 8));
				compBankCard.getTxtBankAccountNo().setLocation(new org.eclipse.swt.graphics.Point(105, 8));
				compBankCard.getTxtBankBranchName().setLocation(new org.eclipse.swt.graphics.Point(105, 8));
				compBankCard.getTxtBankName().setBounds(105, 5, 254, 21);
				compBankCard.getComboCurrency().setEnabled(false);
				compBankCard.getComboCurrency().setBackground(SWTResourceManager.getColor(255, 255, 255));
			}
			dialogShellLayout.marginWidth = 5;
			dialogShellLayout.marginHeight = 5;
			dialogShellLayout.numColumns = 1;
			dialogShellLayout.makeColumnsEqualWidth = true;
			dialogShellLayout.horizontalSpacing = 5;
			dialogShellLayout.verticalSpacing = 5;
			dialogShell.layout();
			
			Rectangle bounds = dialogShell.computeTrim(0, 0, 486, 208);
			dialogShell.setSize(523, 338);
			postInitGUI();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
			return updated;
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
			return true;
		}
	}

	/** Add your post-init code in here */
	public void postInitGUI()
	{
		try
		{
			EngUICommon.centreWindow(dialogShell);
			
			
			HashMap argMap = new HashMap();
			argMap.put(BankKeys.BANK_ID,bankCardId);
			HashBag bankBag = (HashBag)EngTXCommon.doSelectTX("Bnk_initializeBankCardById",argMap);
			
			
			compBankCard.getTxtBankName().setText(bankBag.get(BankKeys.BANK_NAME).toString());
			compBankCard.getTxtBankBranchName().setText(bankBag.get(BankKeys.BANK_BRANCH_NAME).toString());
			compBankCard.getTxtBankAccountNo().setText(bankBag.get(BankKeys.BANK_ACCOUNT_NO).toString());
			compBankCard.getTxtDefinition().setText(bankBag.get(BankKeys.BANK_DEFINITION).toString());
			compBankCard.getTxtBankCode().setText(bankBag.get(BankKeys.BANK_CODE).toString());
			
			String abbr=bankBag.get(AdmKeys.ADM_CURRENCY_ABBR).toString();
			compBankCard.getComboCurrency().setText(abbr);
			compBankCard.getComboCurrency().setData(abbr,bankBag.get(EngKeys.CURRENCY_ID));
			
			HashMap accountMap = (HashMap)bankBag.get(BankKeys.BANK_ACCOUNTING_ACCOUNTS);
			Iterator it = accountMap.keySet().iterator();
			Map fieldMap = compBankCard.getAccountingFields();
			while (it.hasNext())
			{
				Integer type = (Integer) it.next();				
				AccountPickerLeaf picker = (AccountPickerLeaf) fieldMap.get(type);
				picker.setText((String)accountMap.get(type));
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	/** Auto-generated event handler method */
	public void save()
	{
		try
		{
			updated = true;
			
			HashMap argMap=new HashMap();
			
			argMap.put(BankKeys.BANK_ID,bankCardId);
			argMap.put(BankKeys.BANK_NAME,compBankCard.getTxtBankName().getText().trim());
			argMap.put(BankKeys.BANK_BRANCH_NAME,compBankCard.getTxtBankBranchName().getText().trim());
			argMap.put(BankKeys.BANK_ACCOUNT_NO,compBankCard.getTxtBankAccountNo().getText().trim());
			argMap.put(EngKeys.CURRENCY_ID,compBankCard.getComboCurrency().getData(compBankCard.getComboCurrency().getText()));
			argMap.put(BankKeys.BANK_DEFINITION,compBankCard.getTxtDefinition().getText().trim());
			argMap.put(BankKeys.BANK_CODE,compBankCard.getTxtBankCode().getText().trim());
			argMap.put(BankKeys.BANK_ACCOUNTING_ACCOUNTS,compBankCard.createAccountingMap());
			
			EngTXCommon.doTransactionTX("Bnk_updateBankCard",argMap);
			EngUICommon.showUpdatedSuccesfullyMessage(getParent());
			EngBLBankCards.RefreshContentAsistantMap();
			this.dialogShell.close();
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	
	public void delete()
	{
		try
		{
			if (EngUICommon.okToDelete(getParent()))
			{
				HashMap argMap = new HashMap();
				argMap.put(BankKeys.BANK_ID, bankCardId);
				updated = true;
				EngTXCommon.doTransactionTX("Bnk_deleteBankCard", argMap);
				EngBLBankCards.RefreshContentAsistantMap();
				EngUICommon.showDeletedSuccesfullyMessage(getParent());
				this.dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}
	public void cancel()
	{
		dialogShell.close();
	}

	public String getSaveComposite() {
		
		return BankUIBankCardAdd.class.getName();
		
	}

	public void print() {
		// TODO Auto-generated method stub
		
	}

	
	
	
	
}@
