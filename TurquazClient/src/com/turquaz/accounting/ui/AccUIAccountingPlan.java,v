head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.49;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.accounting.ui;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free so ftware. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Onsel Armagan
 * @@version  $Id: AccUIAccountingPlan.java,v 1.9 2005/08/23 16:01:58 onsel Exp $
 */
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeColumn;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.SWT;
import com.turquaz.accounting.AccKeys;
import com.turquaz.common.HashBag;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;

import com.turquaz.engine.bl.EngBLAccountingAccounts;
import com.turquaz.engine.bl.EngBLUtils;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;

import server.util.EngBLLogger;

import com.turquaz.engine.interfaces.SearchComposite;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.lang.*;
import com.cloudgarden.resource.SWTResourceManager;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/
public class AccUIAccountingPlan extends org.eclipse.swt.widgets.Composite implements SearchComposite
{
	{
		//Register as a resource user - SWTResourceManager will
		//handle the obtaining and disposing of resources
		SWTResourceManager.registerResourceUser(this);
	}
	Menu popup;
	private Tree tableTreeAccountingPlan;
	private HashMap accountTotals;
	private Composite compOptions;
	private Button btnSubAccounts;
	private TreeItem selectedIndex=null;
	private Integer selectedId=null;

	public AccUIAccountingPlan(Composite parent, int style)
	{
		super(parent, style);
		initGUI();
		
	}

	/**
	 * Initializes the GUI. Auto-generated code - any changes you make will disappear.
	 */
	public void initGUI()
	{
		try
		{
			preInitGUI();
			GridLayout thisLayout = new GridLayout();
			this.setLayout(thisLayout);
			{
				compOptions = new Composite(this, SWT.NONE);
				GridLayout compOptionsLayout = new GridLayout();
				compOptionsLayout.makeColumnsEqualWidth = true;
				GridData compOptionsLData = new GridData();
				compOptionsLData.grabExcessHorizontalSpace = true;
				compOptionsLData.horizontalAlignment = GridData.FILL;
				compOptionsLData.heightHint = 37;
				compOptions.setLayoutData(compOptionsLData);
				compOptions.setLayout(compOptionsLayout);
				{
					btnSubAccounts = new Button(compOptions, SWT.TOGGLE | SWT.CENTER);
					btnSubAccounts.setText("Alt Hesaplar");
					btnSubAccounts.addSelectionListener(new SelectionAdapter() {
						public void widgetSelected(SelectionEvent evt) {
							
							boolean expand = btnSubAccounts.getSelection();
							TreeItem[] subItems = tableTreeAccountingPlan.getItems();
							for (int k = 0; k < subItems.length; k++) {
								expandTree(subItems[k], expand);
							}
							
						}
					});
				}
			}
			tableTreeAccountingPlan = new Tree(this, SWT.FULL_SELECTION);
			this.setSize(514, 365);
			this.setBackground(SWTResourceManager.getColor(128, 128, 255));
			GridData tableTreeAccountingPlanLData = new GridData();
			tableTreeAccountingPlanLData.verticalAlignment = GridData.FILL;
			tableTreeAccountingPlanLData.horizontalAlignment = GridData.FILL;
			tableTreeAccountingPlanLData.widthHint = -1;
			tableTreeAccountingPlanLData.heightHint = -1;
			tableTreeAccountingPlanLData.horizontalIndent = 0;
			tableTreeAccountingPlanLData.horizontalSpan = 1;
			tableTreeAccountingPlanLData.verticalSpan = 1;
			tableTreeAccountingPlanLData.grabExcessHorizontalSpace = true;
			tableTreeAccountingPlanLData.grabExcessVerticalSpace = true;
			tableTreeAccountingPlan.setLayoutData(tableTreeAccountingPlanLData);
			tableTreeAccountingPlan.setSize(new org.eclipse.swt.graphics.Point(442, 250));
			thisLayout.makeColumnsEqualWidth = true;
			thisLayout.verticalSpacing = 0;
			thisLayout.horizontalSpacing = 0;
			thisLayout.marginHeight = 0;
			thisLayout.marginWidth = 0;
			this.layout();
			postInitGUI();
		}
		catch (Exception e)
		{
			EngBLLogger.log(this.getClass(),e,getShell());
		}
	}

	/** Add your pre-init code in here */
	public void preInitGUI()
	{
		try
		{
			//Add popup menu to delete account
			popup = new Menu(getShell(), SWT.POP_UP);
			MenuItem item = new MenuItem(popup, SWT.PUSH);
			item.setText(EngLangCommonKeys.STR_DELETE);
			item.addListener(SWT.Selection, new Listener()
			{
				public void handleEvent(Event e)
				{
					delete();
				}
			});
			item = new MenuItem(popup, SWT.PUSH);
			item.setText(AccLangKeys.STR_NEW_ACCOUNT); 
			item.addListener(SWT.Selection, new Listener()
			{
				public void handleEvent(Event e)
				{
					try
					{
						TreeItem items[] = tableTreeAccountingPlan.getSelection();
						if (items.length > 0)
						{
							Integer accountId=(Integer) items[0].getData();
							selectedId=accountId;
							boolean updated=new AccUIAddAccountDialog(getShell(), SWT.NULL).open((HashMap)allAccounts.get(accountId));
							if (updated)
							{
								fillTree(-1, "");								
							}
							selectedId=null;
						}
					}
					catch (Exception ex)
					{
                        EngBLLogger.log(this.getClass(),ex,getShell());
					}
				}
			});
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getShell());
		}
	}

	/** Add your post-init code in here */
	public void postInitGUI()
	{
		try
		{
			tableTreeAccountingPlan.addMouseListener(new MouseAdapter()
			{
				public void mouseDoubleClick(MouseEvent evt)
				{
					try
					{
						tableTreeAccountingPlanMouseDoubleClick(evt);
					}
					catch(Exception ex)
					{
                        EngBLLogger.log(this.getClass(),ex,getShell());
					}
				}
			});
			tableTreeAccountingPlan.setLinesVisible(true);
			tableTreeAccountingPlan.setHeaderVisible(true);
			tableTreeAccountingPlan.setMenu(popup);
			final TreeColumn col = new TreeColumn(tableTreeAccountingPlan, SWT.LEFT);
			col.setText(AccLangKeys.STR_ACCOUNT_CODE); 
			col.setWidth(200);
			final TreeColumn col2 = new TreeColumn(tableTreeAccountingPlan, SWT.LEFT);
			col2.setText(AccLangKeys.STR_ACCOUNT_NAME); 
			col2.setWidth(200);
			fillTree(-1, ""); //$NON-NLS-1$
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getShell());
		}
	}

	/**
	 * @@param parent
	 *            Parent Account
	 * @@param codeCrit
	 */
	Map treeItems;
	Map allAccounts;
	Map locatedAccounts;
	
	public void fillTree(int parent, String codeCrit)
	{
		try
		{
			treeItems = new HashMap();
			tableTreeAccountingPlan.removeAll();
			
			
			HashBag mainBranches =(HashBag)EngTXCommon.doSelectTX("Acc_getAllAccountsWithSum",null) ;
			
			HashMap accountList=(HashMap)mainBranches.get(AccKeys.ACC_ACCOUNTS);
			accountTotals = new HashMap();
			allAccounts=new HashMap();
			locatedAccounts=new HashMap();
			
			for (int i = 0; i < accountList.size(); i++)
			{
				HashMap accountMap=(HashMap)accountList.get(new Integer(i));
				Integer accountId=(Integer)accountMap.get(AccKeys.ACC_ACCOUNT_ID);
				allAccounts.put(accountId,accountMap);
				locatedAccounts.put(accountId,new Boolean(false));
			}
			
			
			for (int i = 0; i < accountList.size(); i++)
			{
				HashMap accountMap=(HashMap)accountList.get(new Integer(i));
				Integer accountId=(Integer)accountMap.get(AccKeys.ACC_ACCOUNT_ID);
				Boolean located=(Boolean)locatedAccounts.get(accountId);
				if (!located.booleanValue())
				{
					LocateAccount(accountMap);
				}
			}
			
			if (selectedIndex != null)
			{
				tableTreeAccountingPlan.setSelection(new TreeItem[]{selectedIndex});
				selectedIndex.setExpanded(true);
				selectedIndex=null;
			}
			
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getShell());
		}
	}
	
	public void LocateAccount(HashMap accountMap)throws Exception
	{
		TreeItem item;
		Integer accountId= (Integer)accountMap.get(AccKeys.ACC_ACCOUNT_ID);
		Integer parentId =(Integer) accountMap.get(AccKeys.ACC_PARENT_ID);
		BigDecimal totalDept =(BigDecimal)accountMap.get(AccKeys.ACC_TOTAL_DEPT_AMOUNT);
		if (totalDept==null)
			totalDept=new BigDecimal(0);
		
		BigDecimal totalCredit = (BigDecimal)accountMap.get(AccKeys.ACC_TOTAL_CREDIT_AMOUNT);
		if (totalCredit==null)
			totalCredit=new BigDecimal(0);
		
		BigDecimal[] totals = {totalCredit, totalDept};
		accountTotals.put(accountId, totals);
		if (parentId.intValue() == -1)
		{
			TreeItem[] parentItems = tableTreeAccountingPlan.getItems();
			String accCode =(String)accountMap.get(AccKeys.ACC_ACCOUNT_CODE); 
			String accName=(String)accountMap.get(AccKeys.ACC_ACCOUNT_NAME);
			int k;
			for (k = 0; k < parentItems.length; k++)
			{
				TreeItem pItem = parentItems[k];
				if (pItem.getText(0).equals(AccLangKeys.STR_ACCOUNT_PLAN_CAPITAL))
					continue;
				if (accCode.compareTo(pItem.getText(0)) < 0)
					break;
			}
			item = new TreeItem(tableTreeAccountingPlan, SWT.NULL, k);
			item.setText(0, accCode);
			item.setText(1, accName);
			item.setData(accountId);
			treeItems.put(accountId, item);
			locatedAccounts.put(accountId,new Boolean(true));
		}
		else
		{
			Boolean parentLocated=(Boolean)locatedAccounts.get(parentId);
			if (!parentLocated.booleanValue())
			{
				HashMap parentMap=(HashMap) allAccounts.get(parentId);
				LocateAccount(parentMap);
			}
			TreeItem parentItem = (TreeItem) treeItems.get(parentId);
			parentItem.setFont(SWTResourceManager.getFont("Tahoma", 9, 1, false, false)); //$NON-NLS-1$
			{
				//Register as a resource user - SWTResourceManager
				// will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(parentItem);
			}
			TreeItem[] parentItems = parentItem.getItems();
			String accCode =(String)accountMap.get(AccKeys.ACC_ACCOUNT_CODE); 
			String accName=(String)accountMap.get(AccKeys.ACC_ACCOUNT_NAME);
			int k;
			for (k = 0; k < parentItems.length; k++)
			{
				TreeItem pItem = parentItems[k];
				if (accCode.compareTo(pItem.getText(0)) < 0)
					break;
			}
			item = new TreeItem(parentItem, SWT.NULL, k);
			treeItems.put(accountId, item);
			locatedAccounts.put(accountId,new Boolean(true));
			item.setText(0, accCode);
			item.setText(1, accName);
			item.setData(accountId);
			while (parentId.intValue() != -1)
			{
				BigDecimal[] parentTotals = (BigDecimal[]) accountTotals.get(parentId);
				parentTotals[0] = parentTotals[0].add(totalCredit);
				parentTotals[1] = parentTotals[1].add(totalDept);
				HashMap parentMap=(HashMap)allAccounts.get(parentId);
				parentId =(Integer) parentMap.get(AccKeys.ACC_PARENT_ID);
			}
		}	
		
		if (selectedId !=null && accountId.intValue() == selectedId.intValue())
		{
			selectedIndex=item;
		}
	}

	/** Auto-generated event handler method */
	protected void tableTreeAccountingPlanMouseDoubleClick(MouseEvent evt)throws Exception
	{
		TreeItem items[] = tableTreeAccountingPlan.getSelection();
		if (items.length > 0)
		{
			Integer accountId = (Integer) items[0].getData();
			// it's not an main account
			// main accounts cannot be edited
			// was, now can be edited
			//	if(account.getTurqAccountingAccountByParentAccount().getAccountingAccountsId().intValue()!=-1)
			//	{
			HashMap accountMap=(HashMap) allAccounts.get(accountId);
			Integer parentId=(Integer)accountMap.get(AccKeys.ACC_PARENT_ID);
			boolean result = new AccUIAccountUpdate(this.getShell(), SWT.NULL,accountMap,(HashMap)allAccounts.get(parentId), (BigDecimal[]) accountTotals.get(accountId))
					.open();
			if (result)
			{
				fillTree(-1, ""); //$NON-NLS-1$
			}
			//	}
		}
	}

	public void exportToExcel()
	{
		EngBLUtils.Export2Excel(tableTreeAccountingPlan);
	}

	public void printTable()
	{
		EngBLUtils.printTable(tableTreeAccountingPlan, AccLangKeys.STR_ACCOUNTING_PLAN);
	}

	public void delete()
	{
		try
		{
			TreeItem items[] = tableTreeAccountingPlan.getSelection();
			if (items.length > 0)
			{
				boolean okToDelete = EngUICommon.okToDelete(getShell());
				if (okToDelete)
				{
					Integer accountId = (Integer) items[0].getData();
					HashMap argMap = new HashMap();
					argMap.put(AccKeys.ACC_ACCOUNT_ID, accountId);
					EngTXCommon.doTransactionTX("Acc_deleteAccount", argMap);
					EngBLAccountingAccounts.RefreshContentAsistantMap();
					EngUICommon.showDeletedSuccesfullyMessage(getShell());
					fillTree(-1, "");
				}
			}
		}
		catch (Exception ex)
		{
			EngBLLogger.log(this.getClass(), ex, getShell());
		}
	}

	public void update()
	{
	}

	public void search()
	{
		fillTree(-1, ""); //$NON-NLS-1$
	}

	public void save()
	{
	}
	public void expandTree(TreeItem tableItem, boolean expand)
	{
		tableItem.setExpanded(expand);
		TreeItem[] subTree = tableItem.getItems();
		for (int k = 0; k < subTree.length; k++)
		{
			expandTree(subTree[k], expand);
		}
	}
	public void newForm()
	{
	}
}@
