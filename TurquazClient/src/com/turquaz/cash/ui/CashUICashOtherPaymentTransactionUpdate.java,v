head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.47;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.cash.ui;

/*																		*/
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Onsel
 * @@version  $Id: CashUICashOtherPaymentTransactionUpdate.java,v 1.7 2005/08/26 15:51:08 onsel Exp $
 */
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import org.eclipse.swt.layout.GridLayout;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.accounting.AccKeys;
import com.turquaz.cash.CashKeys;
import com.turquaz.common.HashBag;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.CashLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;



/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
* 
*/
public class CashUICashOtherPaymentTransactionUpdate extends Dialog implements SaveDialogInterface
{
	private Shell dialogShell;
	private CashUICashOtherCollectTransaction compTransAdd;
	private SaveDialogMenu saveDialogMenu1;
	private boolean updated = false;
    private HashBag cashBag;

	public CashUICashOtherPaymentTransactionUpdate(Shell parent, int style,HashBag cashBag)
	{
		super(parent, style);
		this.cashBag=cashBag;
	}

	public boolean open()
	{
		try
		{
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				//Register as a resource user - SWTResourceManager will
				//handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(this.dialogShell);
			}
			dialogShell.setLayout(new GridLayout());
			dialogShell.setSize(633, 353);
			dialogShell.setText(CashLangKeys.TITLE_OTHER_PAYMENT_UPDATE);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			{
				
				compTransAdd = new CashUICashOtherCollectTransaction(dialogShell, SWT.NONE);
				GridData compTransAddLData = new GridData();
				compTransAddLData.grabExcessHorizontalSpace = true;
				compTransAddLData.horizontalAlignment = GridData.FILL;
				compTransAddLData.grabExcessVerticalSpace = true;
				compTransAddLData.verticalAlignment = GridData.FILL;
				compTransAdd.setLayoutData(compTransAddLData);
			}
			postInitGUI();
			dialogShell.layout();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed())
			{
				if (!display.readAndDispatch())
					display.sleep();
			}
			return updated;
		}
		catch (Exception e)
		{
            EngBLLogger.log(this.getClass(),e,getParent());
			return true;
		}
	}

	public void postInitGUI()
	{
		try
		{
			EngUICommon.centreWindow(dialogShell);
			
			compTransAdd.getTxtDocumentNo().setText(cashBag.get(EngKeys.DOCUMENT_NO).toString());
			compTransAdd.getDatePicker().setDate((Date) cashBag.get(EngKeys.DATE));
			compTransAdd.getTxtDefinition().setText(cashBag.get(EngKeys.DEFINITION).toString());
			compTransAdd.getTxtAccountingAccount().setText(cashBag.get(AccKeys.ACC_ACCOUNT_CODE).toString());
			compTransAdd.getTxtCashCard().setText(
					cashBag.get(CashKeys.CASH_TRANS_ROW_CASH_CARD_NAME).toString());
			if (((BigDecimal) cashBag.get(CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT))
					.compareTo(new BigDecimal(0)) == 1)
			{
				compTransAdd.getCurTextTotalAmount().setText(
						(BigDecimal) cashBag.get(CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT));
			}
			else
			{
				compTransAdd.getCurTextTotalAmount().setText(
						(BigDecimal) cashBag.get(CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT));
			}
			compTransAdd.getComboCurrencyType().setText(
					cashBag.get(CashKeys.CASH_TRANS_ROW_ABBREVATION).toString());
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
		}
	}

	public void delete()
	{
		try
		{
			boolean okToDelete=EngUICommon.okToDelete(getParent());
			if (okToDelete)
			{
				updated = true;
				
				HashMap argMap = new HashMap();
				argMap.put(CashKeys.CASH_TRANSACTION_ID,cashBag.get(CashKeys.CASH_TRANSACTION_ID));
				
				EngTXCommon.doTransactionTX("Csh_deleteCashTrans",argMap);
				EngUICommon.showDeletedSuccesfullyMessage(getParent());
				dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}

	public void save()
	{
		try
		{
			if (compTransAdd.verifyFields())
			{
				updated = true;
				HashMap argMap = new HashMap();
				argMap.put(CashKeys.CASH_TRANSACTION_ID,cashBag.get(CashKeys.CASH_TRANSACTION_ID));
				argMap.put(CashKeys.CASH_CARD_ID, compTransAdd.getTxtCashCard().getCashCardId());
				argMap.put(CashKeys.CASH_TOTAL_AMOUNT,compTransAdd.getCurTextTotalAmount().getBigDecimalValue());
				argMap.put(EngKeys.DATE, compTransAdd.getDatePicker().getDate());
				argMap.put(EngKeys.DEFINITION, compTransAdd.getTxtDefinition().getText());
				argMap.put(EngKeys.DOCUMENT_NO, compTransAdd.getTxtDocumentNo().getText());
                argMap.put(EngKeys.CURRENCY_ID, compTransAdd.getComboCurrencyType().getData(compTransAdd.getComboCurrencyType().getText()));
                argMap.put(AccKeys.ACC_ACCOUNT_ID,compTransAdd.getTxtAccountingAccount().getId());
							
				EngTXCommon.doTransactionTX("Csh_updateOtherTrans",argMap);
				EngUICommon.showUpdatedSuccesfullyMessage(getParent());
				dialogShell.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getParent());
		}
	}



	public void cancel() {
		dialogShell.close();
		
	}

	public String getSaveComposite() {
		
		return CashUICashOtherPaymentTransaction.class.getName();
		
	}

	public void print() {
		// TODO Auto-generated method stub
		
	}
}@
