head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.50;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.consignment.ui;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
import java.util.Date;
import java.util.HashMap;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.admin.AdmKeys;
import com.turquaz.bill.BillKeys;
import com.turquaz.common.HashBag;
import com.turquaz.consignment.ConsKeys;
import com.turquaz.current.CurKeys;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.bl.EngBLCommon;
import com.turquaz.engine.bl.EngBLUtils;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.ConsLangKeys;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.DatePicker;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import com.turquaz.inventory.InvKeys;
import com.turquaz.inventory.ui.InvUITransactionTableRow;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/


//   TODO test edilmedi


public class ConUIConsignmentUpdateDialog extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface{
	private Shell dialogShell;

	private ConUIAddConsignment compAddConsignment;
	private SaveDialogMenu saveDialogMenu1;

	Integer consignmentId;

	private boolean updated = false;

	public ConUIConsignmentUpdateDialog(Shell parent, int style, Integer consId) {
		super(parent, style);
		this.consignmentId = consId;
	}

	public boolean open() {
		try {
			Shell parent = getParent();
			dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
			{
				// Register as a resource user - SWTResourceManager will
				// handle the obtaining and disposing of resources
				SWTResourceManager.registerResourceUser(dialogShell);
			}
			dialogShell.setLayout(new GridLayout());
			dialogShell.layout();
			dialogShell.pack();
			dialogShell.setSize(663, 593);
			dialogShell.setText(ConsLangKeys.TITLE_CONS_UPDATE);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this,true,true);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
			{
				
					compAddConsignment = new ConUIAddConsignment(
					dialogShell,
					SWT.NONE);
				GridData compAddConsignmentLData = new GridData();
				compAddConsignmentLData.grabExcessHorizontalSpace = true;
				compAddConsignmentLData.horizontalAlignment = GridData.FILL;
				compAddConsignmentLData.verticalAlignment = GridData.FILL;
				compAddConsignmentLData.grabExcessVerticalSpace = true;
				compAddConsignment.setLayoutData(compAddConsignmentLData);
			}
			postInitGui();
			dialogShell.open();
			Display display = dialogShell.getDisplay();
			while (!dialogShell.isDisposed()) {
				if (!display.readAndDispatch())
					display.sleep();
			}
			return updated;
		} catch (Exception e) {
			EngBLLogger.log(this.getClass(), e, getParent());
			return true;
		}
	}


	public void postInitGui() {

		
		try {
			

			HashMap argMap = new HashMap();
			argMap.put(ConsKeys.CONS_ID, consignmentId);

			HashBag consBag = (HashBag) EngTXCommon.doSelectTX("Con_getConsignmentInfo", argMap);

			compAddConsignment.getTxtCurrentCard().setText(
					(String) consBag.get(CurKeys.CUR_CURRENT_NAME) + " {" + (String) consBag.get(CurKeys.CUR_CURRENT_CODE) + "}"); //$NON-NLS-1$ //$NON-NLS-2$
			compAddConsignment.getDateConsignmentDate().setDate((Date) consBag.get(EngKeys.DATE));
			compAddConsignment.getTxtDocumentNo().setText((String) consBag.get(EngKeys.DOCUMENT_NO));
			compAddConsignment.getTxtBillDocumentNo().setText((String) consBag.get(ConsKeys.CONS_BILL_DOC_NO));

			String currencyAbbr=(String)consBag.get(EngKeys.CURRENCY_ABBR);
			compAddConsignment.getComboCurrencyType().setText(currencyAbbr);
			
			Integer type = (Integer) consBag.get(EngKeys.TYPE);
			if (type.intValue() == 0) {
				compAddConsignment.getComboConsignmentType().setText(EngLangCommonKeys.COMMON_BUY_STRING);
			} else {
				compAddConsignment.getComboConsignmentType().setText(EngLangCommonKeys.COMMON_SELL_STRING);
			}
			compAddConsignment.getTxtDefinition().setText((String) consBag.get(EngKeys.DESCRIPTION));

			if (((Boolean) consBag.get(ConsKeys.CONS_HAS_BILL)).booleanValue()) {
				compAddConsignment.getTxtBillDocumentNo().setText((String) consBag.get(BillKeys.BILL_DOC_NO));
				compAddConsignment.getDatePickerBillDate().setText(DatePicker.formatter.format(consBag.get(BillKeys.BILL_DATE)));
			}

			HashMap invTransMap = (HashMap) consBag.get(InvKeys.INV_TRANSACTIONS);

			fillInvTransactionColumns(invTransMap, type.intValue());
			fillRegisteredGroup((HashMap) consBag.get(ConsKeys.CONS_GROUPS));
		} catch (Exception ex) {
			EngBLLogger.log(this.getClass(), ex, getParent());
		}

	}

	public void fillRegisteredGroup(HashMap groups) {

		for (int i = 0; i < groups.size(); i++) {
			HashMap groupInfo = (HashMap) groups.get(new Integer(i));
			Integer groupId = (Integer) groupInfo.get(AdmKeys.ADM_GROUP_ID);
			compAddConsignment.getCompRegisterGroup().RegisterGroup(groupId);
		}
	}

	public void fillInvTransactionColumns(HashMap transList, int type) {
		compAddConsignment.tableViewer.removeAll();
		TableItem item;

		HashMap invTransInfo;
		for (int i = 0; i < transList.size(); i++) {
			invTransInfo = (HashMap) transList.get(new Integer(i));
			InvUITransactionTableRow row = new InvUITransactionTableRow(type, compAddConsignment.tableViewer);
			row.setDBObject(invTransInfo);
			compAddConsignment.tableViewer.addRow(row);
		}
		InvUITransactionTableRow row2 = new InvUITransactionTableRow(type, compAddConsignment.tableViewer);
		compAddConsignment.tableViewer.addRow(row2);
		compAddConsignment.calculateTotals();
	}

	public void delete() {
		try {
			boolean okToDelete = EngUICommon.okToDelete(getParent());
			if (okToDelete) {
				updated = true;
				HashMap argMap = new HashMap();
				argMap.put(ConsKeys.CONS_ID, consignmentId);
				Integer result = (Integer) EngTXCommon.doTransactionTX("Con_deleteConsignmentById", argMap);
				if (result.intValue() == 1) {
					EngUICommon.showDeletedSuccesfullyMessage(getParent());
					dialogShell.close();
					// delete consignment
				} else if (result.intValue() == -1) {
					EngUICommon.showMessageBox(getParent(), ConsLangKeys.MSG_HAS_BILL_CAN_NOT_DELETE, SWT.ICON_WARNING);
				}

			}
		} catch (Exception ex) {
			EngBLLogger.log(this.getClass(), ex, getParent());
		}
	}

	public void save() {
		try {
			updated = true;
			int type = EngBLCommon.COMMON_BUY_INT;
			if (compAddConsignment.getComboConsignmentType().getText().equals(EngLangCommonKeys.COMMON_SELL_STRING)) //$NON-NLS-1$
			{
				type = EngBLCommon.COMMON_SELL_INT;
			}
			boolean willUpdateBill = EngUICommon.showQuestion(getParent(), ConsLangKeys.MSG_WILL_UPDATE_BILL);

			HashMap argMap = new HashMap();

			argMap.put(ConsKeys.CONS_ID, consignmentId);
			argMap.put(EngKeys.DOCUMENT_NO, compAddConsignment.getTxtDocumentNo().getText().trim());
			argMap.put(EngKeys.DEFINITION, compAddConsignment.getTxtDefinition().getText().trim());
			argMap.put(ConsKeys.CONS_DATE, compAddConsignment.getDateConsignmentDate().getDate());
			argMap.put(EngKeys.TYPE, new Integer(type));
			argMap.put(CurKeys.CUR_CARD_ID, compAddConsignment.getTxtCurrentCard().getCardId());
			argMap.put(EngKeys.CURRENCY_ID, compAddConsignment.getComboCurrencyType().getData(compAddConsignment.getComboCurrencyType().getText()));
			argMap.put(ConsKeys.CONS_GROUPS, compAddConsignment.getConsignmentGroups());
			argMap.put(InvKeys.INV_TRANSACTIONS, compAddConsignment.getInventoryTransactions(type));
			argMap.put(ConsKeys.CONS_UPDATE_BILLS, new Boolean(willUpdateBill));

			EngTXCommon.doTransactionTX("Con_updateConsignment", argMap);
			EngUICommon.showUpdatedSuccesfullyMessage(getParent());
			dialogShell.close();
		} catch (Exception ex) {
			EngBLLogger.log(this.getClass(), ex, getParent());
		}
	}
	
	public void print(){
		try {
			dialogShell.close();
			EngBLUtils.PrintConsignment(consignmentId);

		} catch (Exception ex) {
			EngBLLogger.log(this.getClass(), ex, getParent());
		}
	}
	public void cancel(){
		dialogShell.close();
	}

	public String getSaveComposite() {
		return ConUIAddConsignment.class.getName();
	}
}@
