head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.40;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.current.ui;

import java.util.Date;
import java.util.HashMap;

import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.accounting.AccKeys;
import com.turquaz.accounting.ui.AccUITransactionPaymentTableRow;
import com.turquaz.common.HashBag;
import com.turquaz.current.CurKeys;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.bl.EngBLCommon;
import com.turquaz.engine.interfaces.SaveDialogInterface;
import com.turquaz.engine.lang.CurLangKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.SaveDialogMenu;
import com.turquaz.engine.ui.viewers.ITableRow;

import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.SWT;

import server.util.EngBLLogger;



/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/

// TODO test edilmedi
public class CurUIMultipleCreditVoucherUpdate extends org.eclipse.swt.widgets.Dialog implements SaveDialogInterface
{
    private Shell dialogShell;
    private CurUIMultipleCreditVoucher compVoucher;
	Integer transId;
	private SaveDialogMenu saveDialogMenu1;
    private boolean updated = false;

    public CurUIMultipleCreditVoucherUpdate(Shell parent, int style, Integer curTransId)
    {
        super(parent, style);
        this.transId = curTransId;
    }

    public boolean open()
    {
        try
        {
            Shell parent = getParent();
            dialogShell = new Shell(parent, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE | SWT.MAX);
            {
                //Register as a resource user - SWTResourceManager will
                //handle the obtaining and disposing of resources
                SWTResourceManager.registerResourceUser(dialogShell);
            }
            dialogShell.setLayout(new GridLayout());
            dialogShell.layout();
            dialogShell.setText(CurLangKeys.TITLE_MULTIPLE_CREDIT_VOUCHER_UPDATE); //$NON-NLS-1$
            dialogShell.setSize(677, 392);
			{
				GridData saveDialogMenu1LData = new GridData();
				saveDialogMenu1LData.grabExcessHorizontalSpace = true;
				saveDialogMenu1LData.horizontalAlignment = GridData.FILL;
				saveDialogMenu1 = new SaveDialogMenu(dialogShell, SWT.NONE,this);
				saveDialogMenu1.setLayoutData(saveDialogMenu1LData);
			}
            {
            	
            		compVoucher = new CurUIMultipleCreditVoucher(dialogShell, SWT.NONE);
                GridData compVoucherLData = new GridData();
                compVoucherLData.horizontalAlignment = GridData.FILL;
                compVoucherLData.grabExcessHorizontalSpace = true;
                compVoucherLData.verticalAlignment = GridData.FILL;
                compVoucherLData.grabExcessVerticalSpace = true;
                compVoucher.setLayoutData(compVoucherLData);
            }
            postInitGUI();
            dialogShell.open();
            Display display = dialogShell.getDisplay();
            while (!dialogShell.isDisposed())
            {
                if (!display.readAndDispatch())
                    display.sleep();
            }
            return updated;
        }
        catch (Exception e)
        {
            EngBLLogger.log(this.getClass(),e,getParent());
            return true;
        }
    }

    public void postInitGUI()
    {
        compVoucher.tableViewer.removeAll();
        EngUICommon.centreWindow(dialogShell);
	
		try{
		HashMap argMap = new HashMap();
        argMap.put(CurKeys.CUR_TRANSACTION_ID,transId);
		
		HashBag voucherInfo = (HashBag)EngTXCommon.doSelectTX("Cur_getMultipleVoucherInfo",argMap);
		
		String currentCode = (String)voucherInfo.get(CurKeys.CUR_CURRENT_CODE);
		String currentName = (String)voucherInfo.get(CurKeys.CUR_CURRENT_NAME);
		Date transDate = (Date)voucherInfo.get(EngKeys.DATE);
		String definition = (String)voucherInfo.get(EngKeys.DEFINITION);
		String docNo = (String)voucherInfo.get(EngKeys.DOCUMENT_NO);
		String currencyAbbr=(String)voucherInfo.get(EngKeys.CURRENCY_ABBR);
		
		compVoucher.getTxtDefinition().setText(definition);
		compVoucher.getTxtDocumentNo().setText(docNo);
		compVoucher.getDatePickerTransactionDate().setDate(transDate);
		compVoucher.getComboCurrencyType().setText(currencyAbbr);
		
		HashMap transRows = (HashMap)voucherInfo.get(AccKeys.ACC_TRANSACTION_ROWS);

		compVoucher.getCurrentPicker().setText(currentName+" {"+currentCode+"}");
        
		for(int i=0;i<transRows.size();i++)
		{
			
			HashMap rowInfo = (HashMap)transRows.get(new Integer(i));
			
            ITableRow row = new AccUITransactionPaymentTableRow(compVoucher.tableViewer.getRowList());
            row.setDBObject(rowInfo);
            compVoucher.tableViewer.addRow(row);    
		}
                        
           
        }
        catch(Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
            
        
       
       
    }

    public void save()
	{
		try
		{
			if (compVoucher.verifyFields())
			{
				updated = true;
				HashMap argMap = new HashMap();
				argMap.put(CurKeys.CUR_TRANSACTION_ID, transId);
				argMap.put(CurKeys.CUR_CARD_ID, compVoucher.getCurrentPicker().getCardId());
				argMap.put(AccKeys.ACC_TRANSACTIONS, compVoucher.getTransactionColumns());
				argMap.put(EngKeys.DATE, compVoucher.getDatePickerTransactionDate().getDate());
				argMap.put(EngKeys.DOCUMENT_NO, compVoucher.getTxtDocumentNo().getText().trim());
				argMap.put(CurKeys.CUR_IS_CREDIT, new Boolean(true));
				argMap.put(CurKeys.CUR_TRANS_AMOUNT, compVoucher.getTotalCredit());
				argMap.put(EngKeys.DEFINITION, compVoucher.getTxtDefinition().getText());
				argMap.put(EngKeys.TYPE, new Integer(EngBLCommon.CURRENT_TRANS_MULTIPLE_CREDIT));
				argMap.put(EngKeys.CURRENCY_ID, compVoucher.getComboCurrencyType().getData(
						compVoucher.getComboCurrencyType().getText()));
				EngTXCommon.doTransactionTX("Cur_updateMultipleOtherTransaction", argMap);
				EngUICommon.showUpdatedSuccesfullyMessage(getParent());
                dialogShell.close();
			}
		}
		catch (Exception ex)
		{
			EngBLLogger.log(getClass(), ex, getParent());
		}
	}

    public void delete()
    {
        try
        {
            if (EngUICommon.okToDelete(getParent()))
            {
                
                updated = true;
                HashMap argMap = new HashMap();
                argMap.put(CurKeys.CUR_TRANSACTION_ID,transId);
                EngTXCommon.doTransactionTX("Cur_deleteCurTrans",argMap);
                EngUICommon.showDeletedSuccesfullyMessage(getParent());
                dialogShell.close();
            }
        }
        catch (Exception ex)
        {
            EngBLLogger.log(this.getClass(),ex,getParent());
        }
    }

	

	public void cancel() {
		dialogShell.close();
	}

	public String getSaveComposite() {
		
		return CurUIMultipleCreditVoucher.class.getName();
        
		
	}

	public void print() {
		// TODO Auto-generated method stub
		
	}
}@
