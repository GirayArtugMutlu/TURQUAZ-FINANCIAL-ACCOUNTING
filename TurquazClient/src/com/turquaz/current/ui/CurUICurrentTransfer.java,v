head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.39;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.current.ui;

import java.math.BigDecimal;
import java.util.HashMap;

import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.SWT;

import com.turquaz.engine.EngKeys;
import org.eclipse.swt.custom.CCombo;
import com.turquaz.engine.interfaces.SecureComposite;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.tx.EngTXCommon;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Text;

import server.util.EngBLLogger;

import com.turquaz.common.HashBag;
import com.turquaz.current.CurKeys;
import com.turquaz.current.ui.comp.CurrentPicker;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.CurrencyText;
import com.cloudgarden.resource.SWTResourceManager;
import com.turquaz.engine.ui.component.DatePicker;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/
public class CurUICurrentTransfer extends org.eclipse.swt.widgets.Composite implements SecureComposite{

	{
		//Register as a resource user - SWTResourceManager will
		//handle the obtaining and disposing of resources
		SWTResourceManager.registerResourceUser(this);
	}

	private CLabel lblDocumentNo;
	private CurrencyText currentAmount;
	private CCombo comboCurrencyType;
	private CLabel lblCurrency;
	private Text txtDefinition;
	private DatePicker datePicker;
	private CLabel lblCashTransType;
	private CLabel lblDefinition;
	private CLabel lblAmount;
	private CurrentPicker currentCreditPicker;
	private CLabel lblCreditAcc;
	private CurrentPicker currentDebitPicker;
	private CLabel lblDebitAcc;
	private CLabel lblDate;
	private Text txtDocumentNo;

	public CurUICurrentTransfer(org.eclipse.swt.widgets.Composite parent, int style) {
		super(parent, style);
		initGUI();
	}

	private void initGUI() {
		try {
			{
				this.setSize(443, 159);
			}
			GridLayout thisLayout = new GridLayout();
			this.setLayout(thisLayout);
			thisLayout.numColumns = 2;
			this.setSize(491, 245);
			{
				{
				}
				lblCashTransType = new CLabel(this, SWT.NONE);
				lblCashTransType.setText("Cari Virman");
				lblCashTransType.setFont(SWTResourceManager.getFont(
					"Tahoma",
					14,
					1,
					false,
					false));
				GridData lblCashTransTypeLData = new GridData();
				lblCashTransTypeLData.horizontalAlignment = GridData.CENTER;
				lblCashTransTypeLData.widthHint = 180;
				lblCashTransTypeLData.heightHint = 42;
				lblCashTransTypeLData.horizontalSpan = 2;
				lblCashTransTypeLData.grabExcessHorizontalSpace = true;
				lblCashTransType.setLayoutData(lblCashTransTypeLData);
			}
			{
				lblDocumentNo = new CLabel(this, SWT.NONE);
				GridLayout lblDocumentNoLayout = new GridLayout();
				lblDocumentNo.setText("Doküman No");
				GridData lblDocumentNoLData = new GridData();
				lblDocumentNo.setLayout(lblDocumentNoLayout);
				lblDocumentNoLData.widthHint = 74;
				lblDocumentNoLData.heightHint = 18;
				lblDocumentNo.setLayoutData(lblDocumentNoLData);
			}
			{
				txtDocumentNo = new Text(this, SWT.NONE);
				GridData txtDocumentNoLData = new GridData();
				txtDocumentNo.setSize(151, 17);
				txtDocumentNoLData.widthHint = 151;
				txtDocumentNoLData.heightHint = 17;
				txtDocumentNo.setLayoutData(txtDocumentNoLData);
			}
			{
				lblDate = new CLabel(this, SWT.NONE);
				lblDate.setText("Tarih");
			}
			{
				datePicker = new DatePicker(this, SWT.NONE);
				GridData datePickerLData = new GridData();
				datePickerLData.widthHint = 150;
				datePickerLData.heightHint = 22;
				datePicker.setLayoutData(datePickerLData);
			}
			{
				lblDebitAcc = new CLabel(this, SWT.NONE);
				lblDebitAcc.setText("Borclu Hesap");
			}
			{
				currentDebitPicker = new CurrentPicker(this, SWT.NONE);
				GridData currentDebitPickerLData = new GridData();
				currentDebitPicker.setSize(200, 17);
				currentDebitPickerLData.widthHint = 200;
				currentDebitPickerLData.heightHint = 17;
				currentDebitPicker.setLayoutData(currentDebitPickerLData);
			}
			{
				lblCreditAcc = new CLabel(this, SWT.NONE);
				GridData lblCreditAccLData = new GridData();
				lblCreditAcc.setText("Alacakli Hesap");
				lblCreditAccLData.widthHint = 76;
				lblCreditAccLData.heightHint = 19;
				lblCreditAcc.setLayoutData(lblCreditAccLData);
			}
			{
				currentCreditPicker = new CurrentPicker(this, SWT.NONE);
				GridData currentCreditPickerLData = new GridData();
				currentCreditPicker.setSize(200, 17);
				currentCreditPickerLData.widthHint = 200;
				currentCreditPickerLData.heightHint = 17;
				currentCreditPicker.setLayoutData(currentCreditPickerLData);
			}
			{
				lblCurrency = new CLabel(this, SWT.NONE);
				lblCurrency.setText(EngLangCommonKeys.STR_CURRENCY);
			}
			{
				comboCurrencyType = new CCombo(this, SWT.NONE);
				comboCurrencyType.setBackground(SWTResourceManager.getColor(255, 255, 255));
				GridData comboCurrencyTypeLData = new GridData();
				comboCurrencyTypeLData.widthHint = 135;
				comboCurrencyTypeLData.heightHint = 17;
				comboCurrencyType.setLayoutData(comboCurrencyTypeLData);
				comboCurrencyType.setEditable(false);
			}
			{
				lblAmount = new CLabel(this, SWT.NONE);
				lblAmount.setText("Tutar");
			}
			{
				currentAmount = new CurrencyText(this, SWT.NONE);
				GridData currentAmountLData = new GridData();
				currentAmountLData.widthHint = 146;
				currentAmountLData.heightHint = 17;
				currentAmount.setLayoutData(currentAmountLData);
			}
			{
				lblDefinition = new CLabel(this, SWT.NONE);
				lblDefinition.setText("Aciklama");
			}
			{
				txtDefinition = new Text(this, SWT.NONE);
				GridData txtDefinitionLData = new GridData();
				txtDefinitionLData.widthHint = 280;
				txtDefinitionLData.heightHint = 28;
				txtDefinition.setLayoutData(txtDefinitionLData);
			}
			postInitGui();
			this.layout();
		} catch(Exception e) {
            EngBLLogger.log(this.getClass(),e,getShell());
		}
	}


	private void postInitGui()
	{
		fillCurrencyCombo();
	}
	
	public void fillCurrencyCombo()
	{
		try
		{

			HashBag currencyBag = (HashBag)EngTXCommon.doSelectTX("Eng_getCurrencies",null);
			HashMap currencies = (HashMap)currencyBag.get(EngKeys.CURRENCIES);
			
			for (int k = 0; k < currencies.size(); k++)
			{
					HashMap currencyMap=(HashMap)currencies.get(new Integer(k));

					String abbr=(String)currencyMap.get(EngKeys.CURRENCY_ABBR);
					comboCurrencyType.add(abbr);
					comboCurrencyType.setData(abbr,currencyMap.get(EngKeys.CURRENCY_ID));
				
					if (((Boolean)currencyMap.get(EngKeys.DEFAULT)).booleanValue())
					{
						comboCurrencyType.setText((String)currencyMap.get(EngKeys.CURRENCY_ABBR));
					}
				}
		}
		catch (Exception ex)
		{

            EngBLLogger.log(this.getClass(),ex,getShell());
		}
	}
	
	public void newForm() {
		CurUICurrentTransfer curCard = new CurUICurrentTransfer(this.getParent(), this.getStyle());
		CTabFolder tabfld = (CTabFolder) this.getParent();
		tabfld.getSelection().setControl(curCard);
		this.dispose();

	}
	
	public boolean verifyFields()
	{
		try
		{
			MessageBox msg = new MessageBox(this.getShell(), SWT.NULL);
			if (currentCreditPicker.getData() == null)
			{
				msg.setMessage("Lutfen Borclu Hesabi Giriniz!.."); 
				msg.open();
				currentCreditPicker.setFocus();
				return false;
			}
			if (currentDebitPicker.getData() == null)
			{
				msg.setMessage("Lutfen Alacakli Hesabi Giriniz!.."); 
				msg.open();
				currentDebitPicker.setFocus();
				return false;
			}
			else if ((currentAmount.getBigDecimalValue().doubleValue() <= 0) )
			{
				msg.setMessage("Lutfen Tutar Giriniz!.."); 
				msg.open();
				currentAmount.setFocus();
				return false;
			}
			
			return true;
		}
		catch (Exception ex)
		{
            EngBLLogger.log(this.getClass(),ex,getShell());
			return false;
		}
	}

	public void save()
	{
		try
		{
			if (verifyFields())
			{
				BigDecimal amount = currentAmount.getBigDecimalValue();
				
				HashMap argMap = new HashMap ();
				argMap.put(CurKeys.CUR_CARD_CREDIT, currentDebitPicker.getCardId());
				argMap.put(CurKeys.CUR_CARD_DEPT,currentCreditPicker.getCardId());
				argMap.put(EngKeys.DATE,datePicker.getDate());
				argMap.put(EngKeys.DOCUMENT_NO,txtDocumentNo.getText().trim());
				argMap.put(CurKeys.CUR_TRANS_AMOUNT,currentAmount.getBigDecimalValue());
				argMap.put(EngKeys.DEFINITION,txtDefinition.getText());
                argMap.put(EngKeys.CURRENCY_ID,comboCurrencyType.getData(comboCurrencyType.getText()));
				
				EngTXCommon.doTransactionTX("Cur_saveCurrentTransferBetweenAccounts",argMap);
				EngUICommon.showSavedSuccesfullyMessage(getShell());
				newForm();				
			}
			
		}
		catch(Exception ex)
		{
			 EngBLLogger.log(this.getClass(),ex,getShell());
		}		
	}

	public CurrencyText getCurrentAmount() {
		return currentAmount;
	}

	public CurrentPicker getCurrentCreditPicker() {
		return currentCreditPicker;
	}

	public CurrentPicker getCurrentDebitPicker() {
		return currentDebitPicker;
	}

	public DatePicker getDatePicker() {
		return datePicker;
	}

	public Text getTxtDefinition() {
		return txtDefinition;
	}
	
	public Text getTxtDocumentNo() {
		return txtDocumentNo;
	}

	public CCombo getComboCurrencyType()
	{
		return comboCurrencyType;
	}
}
@
