head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.17.02.51;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.engine.bl;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import net.sf.jasperreports.engine.JasperPrint;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

import server.util.EngBLLogger;

import com.jasperassistant.designer.viewer.ViewerApp;
import com.turquaz.accounting.AccKeys;
import com.turquaz.bill.BillKeys;
import com.turquaz.common.HashBag;
import com.turquaz.consignment.ConsKeys;
import com.turquaz.engine.EngConfiguration;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.lang.AccLangKeys;
import com.turquaz.engine.lang.CurLangKeys;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.tx.EngTXCommon;
import com.turquaz.engine.ui.EngUICommon;
import com.turquaz.engine.ui.component.DatePicker;
import com.turquaz.engine.ui.component.SWTPTable;
import com.turquaz.engine.ui.component.SWTPTree;
import com.turquaz.engine.ui.component.TurkishCurrencyFormat;
import com.turquaz.engine.ui.viewers.SearchTableViewer;
import com.turquaz.engine.ui.viewers.TurquazTableSorter;

import de.kupzog.ktools.kprint.boxes.PBox;
import de.kupzog.ktools.kprint.boxes.PDocument;
import de.kupzog.ktools.kprint.boxes.PHLine;
import de.kupzog.ktools.kprint.boxes.PTableBoxProvider;
import de.kupzog.ktools.kprint.boxes.PTextBox;
import de.kupzog.ktools.kprint.boxes.PTextStyle;
import de.kupzog.ktools.kprint.boxes.PVSpace;
import de.kupzog.ktools.kprint.gui.IconSource;
import de.kupzog.ktools.kprint.gui.PrintPreview;

/**
 * @@author onsel
 */
public class EngBLUtils
{
	public static String logoURL;

    public static void Export2Excel(Table table)
    {
        try
        {
            TurkishCurrencyFormat cf = new TurkishCurrencyFormat();
            FileDialog dialog = new FileDialog(table.getShell(), SWT.SAVE);
            dialog.setFilterNames(new String[]{"Excel File", "(*.xls)"}); //$NON-NLS-1$ //$NON-NLS-2$
            dialog.setFilterExtensions(new String[]{"*.xls"}); //Windows wild cards //$NON-NLS-1$
            dialog.setFileName("Rapor"); //$NON-NLS-1$
            String filepath = dialog.open();
            if (filepath != null)
            {
                short rownum;
                //           create a new file
                FileOutputStream out = new FileOutputStream(filepath);
                //           create a new workbook
                HSSFWorkbook wb = new HSSFWorkbook();
                //           create a new sheet
                HSSFSheet s = wb.createSheet();
                //           declare a row object reference
                HSSFRow r = null;
                //           declare a cell object reference
                HSSFCell c = null;
                //          
                //           set the sheet name in Unicode
                wb.setSheetName(0, "Sheet1", //$NON-NLS-1$
                        HSSFWorkbook.ENCODING_COMPRESSED_UNICODE);
                //           in case of compressed Unicode
                //           wb.setSheetName(0, "HSSF Test", HSSFWorkbook.ENCODING_COMPRESSED_UNICODE );
                //           create a sheet with 30 rows (0-29)
                TableItem items[] = table.getItems();
                int colCount = table.getColumnCount();
                
                
                
                r = s.createRow(1);
                
                for(short j=0;j<colCount;j++)
                {
                    String cell_value = table.getColumn(j).getText();
                    c = r.createCell(j);
                    c.setEncoding(HSSFCell.ENCODING_UTF_16);
                    c.setCellValue(cell_value);           
                    
                }
                  
                
                
                
                for (int i = 2; i <= items.length+1; i++)
                {
                    // create a row
                    r = s.createRow(i);
                    for (short j = 0; j < colCount; j++)
                    {
                        String cell_value = items[i - 2].getText(j);
                        c = r.createCell(j);
                        // set the cell's string value
                        c.setEncoding(HSSFCell.ENCODING_UTF_16);
                              
                         c.setCellValue(cell_value);
                       
                    }
                }
                wb.write(out);
                out.close();
            }
        }
        catch (Exception ex)
        {
            EngBLLogger.log(EngBLUtils.class,ex);
        }
    }
    
    public static void addTreeItem(TreeItem item,  HSSFSheet s ,int colCount)
    {
        //declare a row object reference
        HSSFRow r = null;
        //declare a cell object reference
        HSSFCell c = null;
    	
        // create a row
        r = s.createRow(s.getLastRowNum()+1);
        for (short j = 0; j < colCount; j++)
        {
            String cell_value = item.getText(j);
            c = r.createCell(j);
            // set the cell's string value
            c.setEncoding(HSSFCell.ENCODING_UTF_16);
                  
            c.setCellValue(cell_value);
           
        }
        TreeItem items[] = item.getItems();
        for(int i=0;i<item.getItemCount();i++)
        {
        	addTreeItem(items[i],s,colCount);
        	
        }
        
    	
    	
    }
    
    
    public static void Export2Excel(Tree tree)
    {
        try
        {
            TurkishCurrencyFormat cf = new TurkishCurrencyFormat();
            FileDialog dialog = new FileDialog(tree.getShell(), SWT.SAVE);
            dialog.setFilterNames(new String[]{"Excel File", "(*.xls)"}); //$NON-NLS-1$ //$NON-NLS-2$
            dialog.setFilterExtensions(new String[]{"*.xls"}); //Windows wild cards //$NON-NLS-1$
            dialog.setFileName("Rapor"); //$NON-NLS-1$
            String filepath = dialog.open();
            if (filepath != null)
            {
                short rownum;
                //           create a new file
                FileOutputStream out = new FileOutputStream(filepath);
                //           create a new workbook
                HSSFWorkbook wb = new HSSFWorkbook();
                //           create a new sheet
                HSSFSheet s = wb.createSheet();
                //           declare a row object reference
                HSSFRow r = null;
                //           declare a cell object reference
                HSSFCell c = null;
                //          
                //           set the sheet name in Unicode
                wb.setSheetName(0, "Sheet1", //$NON-NLS-1$
                        HSSFWorkbook.ENCODING_COMPRESSED_UNICODE);
                //           in case of compressed Unicode
                //           wb.setSheetName(0, "HSSF Test", HSSFWorkbook.ENCODING_COMPRESSED_UNICODE );
                //           create a sheet with 30 rows (0-29)
                TreeItem items[] = tree.getItems();
                int colCount = tree.getColumnCount();
                
                
                
                r = s.createRow(1);
                
                for(short j=0;j<colCount;j++)
                {
                    String cell_value = tree.getColumn(j).getText();
                    c = r.createCell(j);
                    c.setEncoding(HSSFCell.ENCODING_UTF_16);
                    c.setCellValue(cell_value);           
                    
                }       
                
                for (int i = 2; i <= items.length+1; i++)
                {
                	   addTreeItem(items[i-2],s,colCount);
                }
                wb.write(out);
                out.close();
            }
        }
        catch (Exception ex)
        {
            EngBLLogger.log(EngBLUtils.class,ex);
        }
    }
    
  
    
	public static void Export2Excel(SearchTableViewer viewer)
	{
		try
		{
			TurkishCurrencyFormat cf = new TurkishCurrencyFormat();
			FileDialog dialog = new FileDialog(viewer.getTable().getShell(), SWT.SAVE);
			dialog.setFilterNames(new String[]{"Excel File", "(*.xls)"}); //$NON-NLS-1$ //$NON-NLS-2$
			dialog.setFilterExtensions(new String[]{"*.xls"}); //Windows wild cards //$NON-NLS-1$
			dialog.setFileName("Rapor"); //$NON-NLS-1$
			String filepath = dialog.open();
			if (filepath != null)
			{
				short rownum;
				//			 create a new file
				FileOutputStream out = new FileOutputStream(filepath);
				//			 create a new workbook
				HSSFWorkbook wb = new HSSFWorkbook();
				//			 create a new sheet
				HSSFSheet s = wb.createSheet();
				//			 declare a row object reference
				HSSFRow r = null;
				//			 declare a cell object reference
				HSSFCell c = null;
				//			
				//			 set the sheet name in Unicode
				wb.setSheetName(0, "Sheet1", //$NON-NLS-1$
						HSSFWorkbook.ENCODING_COMPRESSED_UNICODE);
				//			 in case of compressed Unicode
				//			 wb.setSheetName(0, "HSSF Test", HSSFWorkbook.ENCODING_COMPRESSED_UNICODE );
				//			 create a sheet with 30 rows (0-29)
				TableItem items[] = viewer.getTable().getItems();
				int colCount = viewer.getTable().getColumnCount();
                
                
                
                r = s.createRow(1);
                
                for(short j=0;j<colCount;j++)
                {
                    String cell_value = viewer.getTable().getColumn(j).getText();
                    c = r.createCell(j);
                    c.setEncoding(HSSFCell.ENCODING_UTF_16);
                    c.setCellValue(cell_value);           
                    
                }
                  
                
                
                
				for (int i = 2; i <= items.length+1; i++)
				{
					// create a row
					r = s.createRow(i);
					for (short j = 0; j < colCount; j++)
					{
						String cell_value = items[i - 2].getText(j);
						c = r.createCell(j);
						// set the cell's string value
						c.setEncoding(HSSFCell.ENCODING_UTF_16);
                        
                      
						if (viewer.getColumnTypes()[j]==TurquazTableSorter.COLUMN_TYPE_DECIMAL)
						{
                            try{
                            double dc = (cf.parse(cell_value)).doubleValue();
                            
                            c.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
                            c.setCellValue(dc);
                             }
                            catch(Exception ex)
                            {
                                c.setCellValue(cell_value);
                            }
						}
						else
						{
							c.setCellValue(cell_value);
						}
					}
				}
				wb.write(out);
				out.close();
			}
		}
		catch (Exception ex)
		{
            EngBLLogger.log(EngBLUtils.class,ex);
		}
	}

	public static void printTable(Table table, String title)
	{
		//	  create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTable ptable = new SWTPTable(doc);
		ptable.setTable(table);
		ptable.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}
	
	public static void printTable(Tree table, String title)
	{
		//	  create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTree ptable = new SWTPTree(doc);
		ptable.setTree(table);
		ptable.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}
	
	

	public static void printSubsidiaryLedgerTable(Table table, String title, Properties prop)
	{
		//create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		t.getTextStyle().textAlign = PTextStyle.ALIGN_CENTER;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.1);
		t = new PTextBox(doc);
		t.setText( prop.getProperty("account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText( prop.getProperty("start_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText( prop.getProperty("account_name")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText( prop.getProperty("end_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(prop.getProperty("top_account")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTable ptable = new SWTPTable(doc);
		ptable.setTable(table);
		ptable.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}

	public static void printMonthlyAccountingBalance(Table table, String title, Map props)
	{
		//		create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		t.getTextStyle().textAlign = PTextStyle.ALIGN_CENTER;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.1);
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_START_ACCOUNT + props.get("start_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText(EngLangCommonKeys.STR_MONTH + props.get("month")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_END_ACCOUNT + props.get("end_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_REPORT_DATE + props.get("report_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTable ptable = new SWTPTable(doc);
		ptable.setTable(table);
		ptable.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}

	public static void printAccountingBalance(Table table, String title, Map props)
	{
		//		create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		t.getTextStyle().textAlign = PTextStyle.ALIGN_CENTER;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.1);
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_START_ACCOUNT + props.get("start_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText(EngLangCommonKeys.STR_START_DATE+ props.get("start_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_END_ACCOUNT + props.get("end_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText(EngLangCommonKeys.STR_END_DATE + props.get("end_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_REPORT_DATE + props.get("report_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTable ptable = new SWTPTable(doc);
		ptable.setTable(table);
		ptable.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}
	
	public static void printAccountingBalance(Tree tree, String title, Map props)
	{
		//		create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(title);
		t.getTextStyle().textAlign = PTextStyle.ALIGN_CENTER;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.1);
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_START_ACCOUNT + props.get("start_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText(EngLangCommonKeys.STR_START_DATE+ props.get("start_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(AccLangKeys.STR_END_ACCOUNT + props.get("end_account_code")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.GRAB | PBox.POS_RIGHT);
		t.setText(EngLangCommonKeys.STR_END_DATE + props.get("end_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_REPORT_DATE + props.get("report_date")); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 8;
		t.getTextStyle().fontStyle = SWT.BOLD;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.5);
		// create the table
		SWTPTree ptree=new SWTPTree(doc);
		ptree.setTree(tree);
		ptree.setBoxProvider(new PTableBoxProvider());
		PrintPreview pr = new PrintPreview(null, title, IconSource.getImage("print"), doc); //$NON-NLS-1$
		pr.open();
	}

	public static void printBill(Integer billId, boolean printBalance) throws Exception
	{
		
		HashMap argMap=new HashMap();
		argMap.put(BillKeys.BILL_ID,billId);
		argMap.put(BillKeys.BILL_PRINT_BALANCE,new Boolean(printBalance));
		
		String template=EngConfiguration.getString("invoice_template");
		if  (template== null) 
		{ 
			EngUICommon.showMessageBox(Display.getCurrent().getActiveShell(), EngLangCommonKeys.MSG_BILL_FORMAT_UNDEFINED, SWT.ICON_WARNING); 
			return;
		}
		
		argMap.put(BillKeys.BILL_TEMPLATE, template);
		
		HashBag printBag=(HashBag)EngTXCommon.doSelectTX("Util_printBill",argMap);

		JasperPrint jasperPrint=(JasperPrint)printBag.get(EngKeys.REPORT);
		ViewerApp viewer = new ViewerApp();
		viewer.getReportViewer().setDocument(jasperPrint);
		viewer.open();
			 
	}

	public static void PrintConsignment(Integer consId)
	{
		try
		{
			HashMap argMap=new HashMap();
			argMap.put(ConsKeys.CONS_ID,consId);
			
			HashBag printBag=(HashBag)EngTXCommon.doSelectTX("Util_printConsignment",argMap);
			
			JasperPrint jasperPrint=(JasperPrint)printBag.get(EngKeys.REPORT);
			ViewerApp viewer = new ViewerApp();
			viewer.getReportViewer().setDocument(jasperPrint);
			viewer.open();

		}
		catch (Exception ex)
		{
            EngBLLogger.log(EngBLUtils.class,ex);
		}
	}

	public static void PrintAccTransaction(Integer transId) throws Exception
	{
		HashMap argMap=new HashMap();
		argMap.put(AccKeys.ACC_TRANS_ID,transId);
		
		HashBag printBag=(HashBag)EngTXCommon.doSelectTX("Util_printAccTransaction",argMap);
	
		JasperPrint jasperPrint=(JasperPrint)printBag.get(EngKeys.REPORT);
		ViewerApp viewer = new ViewerApp();
		viewer.getReportViewer().setDocument(jasperPrint);
		viewer.open();
	}

	public static void printCurrentTrans(String curCode,String cardName,String definition,Date transDate, BigDecimal amount, boolean isCredit)
	{
		BigDecimal totalCredit=new BigDecimal(0);
		BigDecimal totalDept=new BigDecimal(0);
		if(isCredit)
		{
			totalCredit=amount;
		}
		else
		{
			totalDept=amount;
		}
		double space = 0.5;
		TurkishCurrencyFormat cf = new TurkishCurrencyFormat();
		//	  create a document with default settings from PageSetup
		PDocument doc = new PDocument("Turquaz Printing"); //$NON-NLS-1$
		// put some header text on it
		PTextBox t;
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_CUR_DEPT_CREDIT_VOUCHER); //$NON-NLS-1$
		t.getTextStyle().textAlign = PTextStyle.ALIGN_CENTER;
		new PVSpace(doc, 0.1);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		new PVSpace(doc, 0.1);
		t = new PTextBox(doc);
		t.setText(CurLangKeys.STR_CUR_CODE + ":      "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(curCode);
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		t = new PTextBox(doc);
		t.setText(CurLangKeys.STR_CUR_NAME + ":    "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(cardName);
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_DATE + ":     "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(DatePicker.formatter.format(transDate));
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_DESCRIPTION + ":       "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(definition);
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_DEPT + ":      "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(cf.format(totalDept));
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		t = new PTextBox(doc);
		t.setText(EngLangCommonKeys.STR_CREDIT + ":  "); //$NON-NLS-1$ //$NON-NLS-2$
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().fontStyle = SWT.BOLD;
		t = new PTextBox(doc, PBox.POS_RIGHT);
		t.setText(cf.format(totalCredit));
		t.getTextStyle().fontSize = 10;
		t.getTextStyle().textAlign = PTextStyle.ALIGN_RIGHT;
		new PVSpace(doc, space);
		new PHLine(doc, 0.02, SWT.COLOR_BLACK);
		PrintPreview pr = new PrintPreview(null, EngLangCommonKeys.STR_PRINT_PREVIEW, IconSource.getImage("print"), doc); //$NON-NLS-1$ //$NON-NLS-2$
		pr.open();
	}
}@
