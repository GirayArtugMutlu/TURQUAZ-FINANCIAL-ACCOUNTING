head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.16.36.35;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.inventory.bl;

/** ********************************************************************* */
/* TURQUAZ: Higly Modular Accounting/ERP Program */
/* ============================================ */
/* Copyright (c) 2004 by Turquaz Software Development Group */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or */
/* (at your option) any later version. */
/* 																		*/
/* This program is distributed in the hope that it will be useful, */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the */
/* GNU General Public License for more details. */
/** ********************************************************************* */
/**
 * @@author Onsel Armagan
 * @@version $Id: InvBLCardSearch.java,v 1.10 2005/09/12 12:13:45 cem Exp $
 */
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.hibernate.Session;

import server.util.EngDALSessionFactory;

import com.turquaz.accounting.AccKeys;
import com.turquaz.common.HashBag;
import com.turquaz.current.CurKeys;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.bl.EngBLCommon;
import com.turquaz.engine.dal.TurqAccountingAccount;
import com.turquaz.engine.dal.TurqInventoryAccountingAccount;
import com.turquaz.engine.dal.TurqInventoryAccountingType;
import com.turquaz.engine.dal.TurqInventoryCard;
import com.turquaz.engine.dal.TurqInventoryCardGroup;
import com.turquaz.engine.dal.TurqInventoryCardUnit;
import com.turquaz.engine.dal.TurqInventoryGroup;
import com.turquaz.engine.dal.TurqInventoryPrice;
import com.turquaz.engine.dal.TurqViewInventoryAmountTotal;
import com.turquaz.inventory.InvKeys;
import com.turquaz.inventory.dal.InvDALCardSearch;


/**
* This code was generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* *************************************
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED
* for this machine, so Jigloo or this code cannot be used legally
* for any corporate or commercial purpose.
* *************************************
*/
public class InvBLCardSearch
{
	public static HashBag checkStabilityInventoryLevel(HashMap argMap)throws Exception
	{
		List invList=(List)argMap.get(InvKeys.INV_CARDS);
		Integer type=(Integer)argMap.get(EngKeys.TYPE);
		
		Session session=EngDALSessionFactory.getSession();
		
		List warningList=new ArrayList();
		
		for(int k=0; k<invList.size(); k++)
		{
			Object[] invTrans=(Object[])invList.get(k);
			Integer invCardId=(Integer)invTrans[0];
			BigDecimal amount=(BigDecimal)invTrans[1];
			
			TurqInventoryCard invCard=(TurqInventoryCard)session.load(TurqInventoryCard.class,invCardId);
			
			int minAmount=invCard.getCardMinimumAmount();
			int maxAmount=invCard.getCardMaximumAmount();
			
		
			TurqViewInventoryAmountTotal invView = InvDALCardSearch.getView(invCardId);
			
			BigDecimal amountNow=new BigDecimal(0);
			if (invView!=null && invView.getTransactionsTotalAmountNow()!=null)
			{
				amountNow=invView.getTransactionsTotalAmountNow();
			}
			
			if (type.intValue() == EngBLCommon.COMMON_SELL_INT ||type.intValue()==EngBLCommon.COMMON_RETURN_BUY_INT )
			{
				if ((amountNow.subtract(amount)).doubleValue() < minAmount)
				{
					warningList.add(invCard.getCardInventoryCode());
				}
					
			}
            else if (type.intValue() == EngBLCommon.COMMON_BUY_INT || type.intValue() == EngBLCommon.COMMON_RETURN_SELL_INT)
			{
				if (maxAmount != 0 && (amountNow.add(amount)).doubleValue() > maxAmount)
				{
					warningList.add(invCard.getCardInventoryCode());
				}
			}			
		}
		
		HashBag resultBag=new HashBag();
		
		resultBag.put(InvKeys.INV_CARDS,warningList);
		
		return resultBag;
		
		
	}

	public static HashBag getAllInvAccTypes() throws Exception
	{
		try
		{
			HashBag typeBag=new HashBag();
			List typeList=InvDALCardSearch.getAllInvAccTypes();
			
			typeBag.put(InvKeys.INV_ACC_TYPES,new HashMap());
			
			for(int k=0; k<typeList.size(); k++)
			{
				TurqInventoryAccountingType type=(TurqInventoryAccountingType)typeList.get(k);
				
				typeBag.put(InvKeys.INV_ACC_TYPES,k,InvKeys.INV_ACC_TYPE_ID,type.getId());
				typeBag.put(InvKeys.INV_ACC_TYPES,k,InvKeys.INV_ACC_TYPE_NAME,type.getTypeName());
				typeBag.put(InvKeys.INV_ACC_TYPES,k,InvKeys.INV_ACC_TYPE_DEFINITION,type.getDefinition());
			}
			return typeBag;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static HashBag getInvAccountingAccs(HashMap argMap) throws Exception
	{
		try
		{
			Integer invCardId = (Integer) argMap.get(InvKeys.INV_CARD_ID);
			List invAccounts= InvDALCardSearch.getInvAccountingAccs(invCardId);
			HashBag accountBag=new HashBag();
			accountBag.put(InvKeys.INV_ACCOUNTS, new HashMap());
			
			for(int k=0; k<invAccounts.size(); k++)
			{
				TurqInventoryAccountingAccount invAcc=(TurqInventoryAccountingAccount)invAccounts.get(k);
				
				accountBag.put(InvKeys.INV_ACCOUNTS,k,InvKeys.INV_ACCOUNT_ID,invAcc.getId());
				
				HashMap accMap=new HashMap();
				TurqAccountingAccount acc=invAcc.getTurqAccountingAccount();
				accMap.put(AccKeys.ACC_ACCOUNT_ID, acc.getId());
				accMap.put(AccKeys.ACC_ACCOUNT_CODE, acc.getAccountCode());
				accMap.put(AccKeys.ACC_ACCOUNT_NAME, acc.getAccountName());
				
				accountBag.put(InvKeys.INV_ACCOUNTS,k,AccKeys.ACC_ACCOUNT,accMap);
				
				HashMap invAccType=new HashMap();
				TurqInventoryAccountingType type=invAcc.getTurqInventoryAccountingType();
				invAccType.put(InvKeys.INV_ACC_TYPE_ID,type.getId());
				invAccType.put(InvKeys.INV_ACC_TYPE_NAME,type.getTypeName());
				invAccType.put(InvKeys.INV_ACC_TYPE_DEFINITION,type.getDefinition());
				
				accountBag.put(InvKeys.INV_ACCOUNTS,k,InvKeys.INV_ACC_TYPE,invAccType);
			}
			
			return accountBag;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
	
	public static HashBag getInvCardGroups(HashMap argMap) throws Exception
	{
		Integer invCardId=(Integer)argMap.get(InvKeys.INV_CARD_ID);
		List invGroups=InvDALCardSearch.getInvCardGroups(invCardId);	
		
		HashBag groupBag=new HashBag();
		groupBag.put(InvKeys.INV_CARD_GROUPS, new HashMap());
		
		for(int k=0; k<invGroups.size(); k++)
		{
			TurqInventoryCardGroup invCardGroup=(TurqInventoryCardGroup)invGroups.get(k);
			TurqInventoryGroup invGroup=invCardGroup.getTurqInventoryGroup();
			
			HashMap invGroupMap=new HashMap();
			invGroupMap.put(InvKeys.INV_GROUP_ID,invGroup.getId());
			invGroupMap.put(InvKeys.INV_GROUP_NAME,invGroup.getGroupsName());
			invGroupMap.put(InvKeys.INV_GROUP_DESCRIPTION,invGroup.getGroupsDescription());
			invGroupMap.put(InvKeys.INV_PARENT_GROUP_ID,invGroup.getTurqInventoryGroup().getId());
			
			groupBag.put(InvKeys.INV_CARD_GROUPS,k,InvKeys.INV_CARD_GROUP_ID,invCardGroup.getId());

			groupBag.put(InvKeys.INV_CARD_GROUPS,k,InvKeys.INV_GROUP,invGroupMap);
			
		}		
		return groupBag;
		
	}
	
	public static HashBag getInvCardPrices(HashMap argMap) throws Exception
	{
		Integer invCardId=(Integer)argMap.get(InvKeys.INV_CARD_ID);
		List invPrices=InvDALCardSearch.getInvCardPrices(invCardId);	
		
		HashBag priceBag=new HashBag();
		
		List priceList=new ArrayList();
		
		for(int k=0; k<invPrices.size(); k++)
		{
			TurqInventoryPrice invPrice=(TurqInventoryPrice)invPrices.get(k);
			HashMap priceMap=new HashMap();
			priceMap.put(InvKeys.INV_PRICE_ID,invPrice.getId());
			priceMap.put(EngKeys.PRICE,invPrice.getPricesAmount());
			priceMap.put(EngKeys.TYPE,new Boolean(invPrice.isPricesType()));
			priceMap.put(EngKeys.CURRENCY_ID,invPrice.getTurqCurrency().getId());
			priceMap.put(EngKeys.CURRENCY_ABBR,invPrice.getTurqCurrency().getCurrenciesAbbreviation());
			priceList.add(priceMap);
		}		
		HashMap allPrices=new HashMap();
		allPrices.put(InvKeys.INV_CARD_PRICES,priceList);
		priceBag.put(InvKeys.INV_CARD_PRICES, allPrices);		
		return priceBag;
		
	}

	public static TurqAccountingAccount getInventoryAccount(Integer invCardId, int invAccTypeId) throws Exception
	{
		try
		{
			return InvDALCardSearch.getInventoryAccount(invCardId, invAccTypeId);
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static HashBag getInventoryCard(HashMap argMap) throws Exception
	{
		try
		{
			String invCode = (String) argMap.get(InvKeys.INV_CARD_CODE);
			TurqInventoryCard invCard=InvDALCardSearch.getInventoryCard(invCode);
			HashBag cardBag=new HashBag();
			if (invCard != null)
			{
				HashMap cardMap=new HashMap();
				cardMap.put(InvKeys.INV_CARD_ID,invCard.getId());
				cardMap.put(InvKeys.INV_CARD_NAME,invCard.getCardName());
				cardMap.put(InvKeys.INV_CARD_CODE,invCard.getCardInventoryCode());
				cardMap.put(InvKeys.INV_CARD_DEFINITION,invCard.getCardDefinition());
				cardMap.put(InvKeys.INV_IS_SPEC_VAT_FOR_EACH,new Boolean(invCard.isSpecVatForEach()));
				cardBag.put(InvKeys.INV_CARD,cardMap);
			}
			
			return cardBag;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static HashBag getInventoryCardFromName(HashMap argMap) throws Exception
	{
		try
		{
			String invCode = (String) argMap.get(InvKeys.INV_CARD_NAME);
			TurqInventoryCard invCard=InvDALCardSearch.getInventoryCardFromName(invCode);
			
			HashBag cardBag=new HashBag();
			HashMap cardMap=new HashMap();
			
			cardMap.put(InvKeys.INV_CARD_ID,invCard.getId());
			cardMap.put(InvKeys.INV_CARD_NAME,invCard.getCardName());
			cardMap.put(InvKeys.INV_CARD_CODE,invCard.getCardInventoryCode());
			cardMap.put(InvKeys.INV_CARD_DEFINITION,invCard.getCardDefinition());
			cardMap.put(InvKeys.INV_IS_SPEC_VAT_FOR_EACH,new Boolean(invCard.isSpecVatForEach()));
			
			cardBag.put(InvKeys.INV_CARD,cardMap);
			return cardBag;
			
			
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static HashBag getInventoryCards() throws Exception
	{
		
		List list = InvDALCardSearch.getInventoryCards();
		HashBag resultBag = new HashBag();
		resultBag.put(InvKeys.INV_CARDS,new HashMap());
		
		int i=0;
		Iterator it =list.iterator();
		while(it.hasNext())
		{
			Object data[]=(Object[])it.next();
			resultBag.put(InvKeys.INV_CARDS,i,InvKeys.INV_CARD_CODE,data[0]);
			resultBag.put(InvKeys.INV_CARDS,i,InvKeys.INV_CARD_NAME,data[1]);	
			resultBag.put(InvKeys.INV_CARDS,i,InvKeys.INV_CARD_ID,data[2]);
			i++;
		}
		
		List invPrices=InvDALCardSearch.getInventoryPrices();
		
		String hashValue;
		HashMap priceMap=new HashMap();
		for(int k=0; k<invPrices.size(); k++)
		{
			Object data[]=(Object[])invPrices.get(k);
			Integer invCardId=(Integer)data[0];
			Boolean type=(Boolean)data[1];
			BigDecimal price=(BigDecimal)data[2];
			Integer currencyId=(Integer)data[3];
			
			hashValue=invCardId.toString()+"+"+currencyId.toString()+"+"+(type.booleanValue() ? "1" : "0");
			priceMap.put(hashValue,price);
		}
		
		resultBag.put(InvKeys.INV_CARD_PRICES,priceMap);
		
		return resultBag;		
		
	}

	public static HashBag getTransactionTotalReport(HashMap argMap) throws Exception
	{
		String cardCodeStart = (String) argMap.get(InvKeys.INV_CARD_CODE_START);
		String cardCodeEnd = (String) argMap.get(InvKeys.INV_CARD_CODE_END);
		String cardNameStart = (String) argMap.get(InvKeys.INV_CARD_NAME_START);
		String cardNameEnd = (String) argMap.get(InvKeys.INV_CARD_NAME_END);
		Date startDate=(Date)argMap.get(EngKeys.DATE_START);
		Date endDate=(Date)argMap.get(EngKeys.DATE_END);
		String curCardStart=(String)argMap.get(CurKeys.CUR_CARD_START);
		String curCardEnd=(String)argMap.get(CurKeys.CUR_CARD_END);
		Integer invMainGroupId=(Integer)argMap.get(InvKeys.INV_MAIN_GROUP_ID);
		Integer invSubGroupId=(Integer)argMap.get(InvKeys.INV_SUB_GROUP_ID);
		
		List transList=InvDALCardSearch.getTransactionTotalReport(cardCodeStart, cardCodeEnd, cardNameStart, cardNameEnd,
				startDate, endDate, curCardStart, curCardEnd, invMainGroupId, invSubGroupId);
	
		HashBag transBag=new HashBag();
		transBag.put(InvKeys.INV_TRANSACTIONS, new HashMap());
		
		for(int k=0; k<transList.size(); k++)
		{
			Object[] transInfo=(Object[])transList.get(k);
			Integer invCardId=(Integer)transInfo[0];
			String invCode=(String)transInfo[1];
			String invName=(String)transInfo[2];
			
			BigDecimal transInTotalAmountIn=(BigDecimal)transInfo[3];
			if (transInTotalAmountIn == null)
				transInTotalAmountIn=new BigDecimal(0);
			
			BigDecimal transInTotalPriceIn=(BigDecimal)transInfo[4];
			if (transInTotalPriceIn == null)
				transInTotalPriceIn=new BigDecimal(0);
			
			BigDecimal transOutTotalAmountOut=(BigDecimal)transInfo[5];
			if (transOutTotalAmountOut == null)
				transOutTotalAmountOut=new BigDecimal(0);
			
			BigDecimal transOutTotalPriceOut=(BigDecimal)transInfo[6];
			if (transOutTotalPriceOut== null)
				transOutTotalPriceOut=new BigDecimal(0);
			
			BigDecimal transOverInTotalAmountIn=(BigDecimal)transInfo[7];
			if (transOverInTotalAmountIn==null)
					transOverInTotalAmountIn=new BigDecimal(0);
			
			BigDecimal transOverInTotalPriceIn=(BigDecimal)transInfo[8];
			if (transOverInTotalPriceIn==null)
				transOverInTotalPriceIn=new BigDecimal(0);
			
			BigDecimal transOverOutTotalAmountOut=(BigDecimal)transInfo[9];
			if ( transOverOutTotalAmountOut== null)
				transOverOutTotalAmountOut=new BigDecimal(0);
			
			BigDecimal transOverOutTotalPriceOut=(BigDecimal)transInfo[10];
			if (transOverOutTotalPriceOut==null)
				transOverOutTotalPriceOut=new BigDecimal(0);
			
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_CARD_ID,invCardId);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_CARD_NAME,invName);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_CARD_CODE,invCode);
			
			
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_IN_TOTAL_AMOUNT_IN,transInTotalAmountIn);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_IN_TOTAL_PRICE_IN,transInTotalPriceIn);
			
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OUT_TOTAL_AMOUNT_OUT,transOutTotalAmountOut);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OUT_TOTAL_PRICE_OUT,transOutTotalPriceOut);
			
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OVER_IN_TOTAL_AMOUNT_IN,transOverInTotalAmountIn);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OVER_IN_TOTAL_PRICE_IN,transOverInTotalPriceIn);
			
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OVER_OUT_TOTAL_AMOUNT_OUT,transOverOutTotalAmountOut);
			transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_TRANS_OVER_OUT_TOTAL_PRICE_OUT,transOverOutTotalPriceOut);
			
			if (transInfo.length > 11)
			{
				Integer groupId=(Integer)transInfo[11];
				String groupName=(String)transInfo[12];
				
				transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_GROUP_ID,groupId);
				transBag.put(InvKeys.INV_TRANSACTIONS,k,InvKeys.INV_GROUP_NAME,groupName);				
				
			}
		}
		
		return transBag;
	}

	public static HashBag initializeInventoryCard(HashMap argMap) throws Exception
	{
		try
		{
			Integer cardId=(Integer)argMap.get(InvKeys.INV_CARD_ID);
			
			Session session=EngDALSessionFactory.getSession();
			TurqInventoryCard invCard = (TurqInventoryCard)session.load(TurqInventoryCard.class,cardId);
			
			HashBag cardBag=new HashBag();
			
			cardBag.put(InvKeys.INV_CARD_ID, invCard.getId());
			cardBag.put(InvKeys.INV_CARD_NAME, invCard.getCardName());
			cardBag.put(InvKeys.INV_CARD_CODE, invCard.getCardInventoryCode());			
			cardBag.put(InvKeys.INV_CARD_DEFINITION, invCard.getCardDefinition());			
			cardBag.put(InvKeys.INV_IS_SPEC_VAT_FOR_EACH, new Boolean(invCard.isSpecVatForEach()));
			cardBag.put(InvKeys.INV_VAT_RATE,new BigDecimal(invCard.getCardVat()));
			cardBag.put(InvKeys.INV_VAT_SPECIAL_RATE, new BigDecimal(invCard.getCardSpecialVat()));
			cardBag.put(InvKeys.INV_SPECIAL_VAT_FOR_EACH, invCard.getCardSpecialVatEach());
			cardBag.put(InvKeys.INV_DISCOUNT_RATE, new BigDecimal(invCard.getCardDiscount()));
			cardBag.put(InvKeys.INV_MAX_AMOUNT, new Integer(invCard.getCardMaximumAmount()));
			cardBag.put(InvKeys.INV_MIN_AMOUNT, new Integer(invCard.getCardMinimumAmount()));
			
			
			Iterator it=invCard.getTurqInventoryCardUnits().iterator();
			cardBag.put(InvKeys.INV_CARD_UNITS, new HashMap());
			int row=0;
			while (it.hasNext())
			{
				TurqInventoryCardUnit cardUnit=(TurqInventoryCardUnit)it.next();
				
				cardBag.put(InvKeys.INV_CARD_UNITS,row,InvKeys.INV_CARD_UNIT_ID,cardUnit.getId());
				cardBag.put(InvKeys.INV_CARD_UNITS,row,InvKeys.INV_CARD_UNIT_FACTOR,cardUnit.getCardUnitsFactor());
				
				HashMap unitMap=new HashMap();
				unitMap.put(InvKeys.INV_UNIT_ID,cardUnit.getTurqInventoryUnit().getId());
				unitMap.put(InvKeys.INV_UNIT_NAME,cardUnit.getTurqInventoryUnit().getUnitsName());
			
				cardBag.put(InvKeys.INV_CARD_UNITS,row,InvKeys.INV_UNIT,unitMap);
				row++;
			}			
			
			return cardBag;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static HashBag searchCards(HashMap argMap) throws Exception
	{
		try
		{
			String cardName = (String) argMap.get(InvKeys.INV_CARD_NAME);
			String cardCode = (String) argMap.get(InvKeys.INV_CARD_CODE);
			Integer groupId = (Integer) argMap.get(InvKeys.INV_GROUP_ID);
			List cards=InvDALCardSearch.searchInventoryCards(cardName, cardCode, groupId);
			
			HashBag cardBag=new HashBag();
			cardBag.put(InvKeys.INV_CARDS, new HashMap());
			
			for(int k=0; k<cards.size(); k++)
			{
				Object[] invInfo=(Object[])cards.get(k);
				
				TurqInventoryCard invCard=(TurqInventoryCard)invInfo[0];				
				
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_CARD_ID,invCard.getId());
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_CARD_CODE,invCard.getCardInventoryCode());
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_CARD_NAME,invCard.getCardName());
								
				BigDecimal amountIn=(BigDecimal)invInfo[1];
				if (amountIn == null)
				{
					amountIn=new BigDecimal(0);
				}

				BigDecimal amountOut=(BigDecimal)invInfo[3];
				if (amountOut == null)
				{
					amountOut=new BigDecimal(0);
				}
				BigDecimal priceIn=(BigDecimal)invInfo[2];
				if (priceIn == null)
				{
					priceIn = new BigDecimal(0);
				}
				BigDecimal priceOut=(BigDecimal)invInfo[4];
				if (priceOut == null)
				{
					priceOut = new BigDecimal(0);
				}
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_AMOUNT_IN,amountIn);
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_AMOUNT_OUT,amountOut);
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_PRICE_IN,priceIn);
				cardBag.put(InvKeys.INV_CARDS,k,InvKeys.INV_PRICE_OUT,priceOut);
			}
			
			return cardBag;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
	
	public static List searchCardsAdvanced(HashMap argMap) throws Exception
	{
		try
		{
			String cardCodeStart = (String) argMap.get(InvKeys.INV_CARD_CODE_START);
			String cardCodeEnd = (String) argMap.get(InvKeys.INV_CARD_CODE_END);
			String cardNameStart = (String) argMap.get(InvKeys.INV_CARD_NAME_START);
			String cardNameEnd = (String) argMap.get(InvKeys.INV_CARD_NAME_END);
			TurqInventoryGroup group = (TurqInventoryGroup) argMap.get(InvKeys.INV_GROUP);
			return InvDALCardSearch.searchInventoryCardsAdvanced(cardCodeStart, cardCodeEnd, cardNameStart,
					cardNameEnd, group);
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
}@
