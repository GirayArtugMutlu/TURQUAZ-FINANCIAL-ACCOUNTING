head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.16.36.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.cash.bl;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author Onsel
 * @@version $Id: CashBLCashTransactionSearch.java,v 1.5 2005/08/29 11:49:07 onsel Exp $
 */
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.hibernate.Session;

import server.util.EngDALSessionFactory;

import net.sf.jasperreports.engine.JasperPrint;
import com.turquaz.accounting.AccKeys;
import com.turquaz.cash.CashKeys;
import com.turquaz.cash.dal.CashDALCashCard;
import com.turquaz.common.HashBag;
import com.turquaz.current.CurKeys;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.bl.EngBLCommon;
import com.turquaz.engine.dal.TurqCashCard;
import com.turquaz.engine.dal.TurqCashTransaction;
import com.turquaz.engine.dal.TurqCashTransactionRow;
import com.turquaz.engine.dal.TurqCashTransactionType;
import com.turquaz.engine.dal.TurqCurrentCard;
import com.turquaz.engine.lang.EngLangCommonKeys;
import com.turquaz.engine.ui.component.TurkishCurrencyFormat;
import com.turquaz.utility.reporting.ReportGenerator;

public class CashBLCashTransactionSearch
{
	


    public static HashBag getCashCardAbstract(HashMap argMap) throws Exception
	{
		Integer cashCardId = (Integer) argMap.get(CashKeys.CASH_CARD_ID);
		Date startDate = (Date) argMap.get(EngKeys.DATE_START);
		Date endDate = (Date) argMap.get(EngKeys.DATE_END);
		Boolean daily=(Boolean)argMap.get(CashKeys.CASH_DAILY);
		Integer transTypeId=(Integer)argMap.get(CashKeys.CASH_TRANS_TYPE_ID);
		String transTypeName=(String)argMap.get(CashKeys.CASH_TRANS_TYPE_NAME);
		
		List deferred=CashDALCashCard.getDeferredTotal(cashCardId,startDate,transTypeId);
		List transList=CashDALCashCard.getTransactions(cashCardId,startDate,endDate,transTypeId);
		
		
		HashBag abstractBag = new HashBag();
		abstractBag.put(CashKeys.CASH_DEFERRED,deferred);
		abstractBag.put(CashKeys.CASH_TRANSACTIONS,transList);
		
		if (daily.booleanValue())
		{
			return abstractBag;
		}
		Map parameters = new HashMap();
		
		if (transTypeId != null)
		{
			parameters.put("typeName", transTypeName);
		}
		else
		{
			parameters.put("typeName", EngLangCommonKeys.COMMON_ALL_STRING);
		}
		
		
		if (deferred.size() != 0)
		{
			Object[] amounts = (Object[]) deferred.get(0);
			parameters.put("initialDept", (BigDecimal) amounts[0]);
			parameters.put("initialCredit", (BigDecimal) amounts[1]);
		}
		else
		{
			parameters.put("initialDept", new BigDecimal(0));
			parameters.put("initialCredit", new BigDecimal(0));
		}
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		parameters.put("reportDate", sdf.format(Calendar.getInstance().getTime()));
		parameters.put("startDate", sdf.format(startDate));
		parameters.put("endDate", sdf.format(endDate));
		parameters.put("dateFormatter", sdf);
		parameters.put("currencyFormatter", new TurkishCurrencyFormat());
		parameters.put("cashCardName", CashDALCashCard.getCashCardName(cashCardId));
		
		
		String[] fields = new String[]{"id", "transaction_date", "transaction_definition", "dept_amount", "credit_amount",
				"cash_transaction_type_name"};
		
		
		JasperPrint jasperPrint=ReportGenerator.generateReport("/reports/cash/CashCardAbstract.jrxml",transList,fields,parameters);
		
		
		

		abstractBag.put(EngKeys.REPORT,jasperPrint);
		
		return abstractBag;
	}
	
	public static HashBag getCashTransactionTypes() throws Exception
	{
		HashBag typeBag= new HashBag();
		
		List list=CashDALCashCard.getCashTransactionTypes();
		
		typeBag.put(CashKeys.CASH_TRANS_TYPES, new HashMap());
		
		for(int k=0; k<list.size(); k++)
		{
			TurqCashTransactionType type=(TurqCashTransactionType)list.get(k);
			
			typeBag.put(CashKeys.CASH_TRANS_TYPES,k,CashKeys.CASH_TRANS_TYPE_ID, type.getId());
			typeBag.put(CashKeys.CASH_TRANS_TYPES,k,CashKeys.CASH_TRANS_TYPE_NAME, type.getCashTransationTypeName());
		}		
		return typeBag;
	}
    
    public static HashBag getInitialTransactions() throws Exception 
	{
        HashBag bag = new HashBag();
        bag.put(CashKeys.CASH_TRANS_ROW,new HashMap());
        

		List cashTransList =  CashDALCashCard.getInitialTransactions();
        
        for(int i =0;i<cashTransList.size();i++)
        {
            TurqCashTransactionRow curTrans = (TurqCashTransactionRow)cashTransList.get(i);
            bag.put(CashKeys.CASH_TRANS_ROW,i,EngKeys.DEPT_AMOUNT,curTrans.getDeptAmount());
            bag.put(CashKeys.CASH_TRANS_ROW,i,EngKeys.CREDIT_AMOUNT,curTrans.getCreditAmount());
            bag.put(CashKeys.CASH_TRANS_ROW,i,CashKeys.CASH_CARD_NAME,curTrans.getTurqCashCard().getCashCardName());
            bag.put(CashKeys.CASH_TRANS_ROW,i,CashKeys.CASH_CARD_ID,curTrans.getTurqCashCard().getId());
            bag.put(CashKeys.CASH_TRANS_ROW,i,EngKeys.DEFINITION,curTrans.getTurqCashCard().getCashCardDefinition());
            bag.put(CashKeys.CASH_TRANS_ROW,i,CashKeys.CASH_TRANSACTION_ID,curTrans.getTurqCashTransaction().getId());
                    
        }   
        
        return bag;
	}

	

    public static HashBag getTransactionBetweenAccounts(HashMap argMap) throws Exception
    {
     
           
            Integer id = (Integer) argMap.get(EngKeys.TRANS_ID);
			
			Session session = EngDALSessionFactory.getSession();
			TurqCashTransaction cashTrans = (TurqCashTransaction) session.load(TurqCashTransaction.class, id);
           
            
            HashBag returnBag = new HashBag();
            
            returnBag.put(EngKeys.TRANS_ID,cashTrans.getId());
            returnBag.put(CashKeys.CASH_TRANS_MODULE_ID,cashTrans.getTurqEngineSequence().getTurqModule().getId());
            returnBag.put(CashKeys.CASH_TRANS_TYPE_ID,cashTrans.getTurqCashTransactionType().getId());
            returnBag.put(EngKeys.DOCUMENT_NO,cashTrans.getDocumentNo());
            returnBag.put(EngKeys.DATE,cashTrans.getTransactionDate());
            returnBag.put(EngKeys.DEFINITION,cashTrans.getTransactionDefinition());
            returnBag.put(EngKeys.ENG_SEQ_ID,cashTrans.getTurqEngineSequence().getId());
            
            TurqCurrentCard curCard = CashDALCashCard.getCurrentCard(cashTrans.getTurqEngineSequence());
            
            
            if (curCard != null)
            {
                returnBag.put(CurKeys.CUR_CURRENT_NAME,curCard.getCardsName());   
                returnBag.put(CurKeys.CUR_CURRENT_CODE,curCard.getCardsCurrentCode());  
            }
            
            Iterator it = cashTrans.getTurqCashTransactionRows().iterator();
            
            while (it.hasNext())
            {
                TurqCashTransactionRow row = (TurqCashTransactionRow) it.next();
                
                if (((BigDecimal)row.getDeptAmountInForeignCurrency()).compareTo(new BigDecimal(0)) == 1)
                {
                    returnBag.put(CashKeys.CASH_CARD_WITH_DEPT,row.getTurqCashCard().getCashCardName());
                    returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT,row.getDeptAmountInForeignCurrency());
                }
                else
                {
                    returnBag.put(CashKeys.CASH_CARD_WITH_CREDIT,row.getTurqCashCard().getCashCardName());
                    returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT,row.getDeptAmountInForeignCurrency());
                    
                }
                
                returnBag.put(CashKeys.CASH_TRANS_ROW_ABBREVATION,row.getTurqCurrencyExchangeRate().getTurqCurrencyByExchangeCurrencyId().getCurrenciesAbbreviation());
               
             }
            
            return returnBag;
                    
    }
    
    public static HashBag getTransactionInfo(HashMap argMap) throws Exception
    {
     
           
            Integer id = (Integer) argMap.get(EngKeys.TRANS_ID);
			
			Session session = EngDALSessionFactory.getSession();
			TurqCashTransaction cashTrans = (TurqCashTransaction) session.load(TurqCashTransaction.class, id);
            
            HashBag returnBag = new HashBag();
            
            returnBag.put(CashKeys.CASH_TRANSACTION_ID,cashTrans.getId());
            returnBag.put(CashKeys.CASH_TRANS_MODULE_ID,cashTrans.getTurqEngineSequence().getTurqModule().getId());
            returnBag.put(CashKeys.CASH_TRANS_TYPE_ID,cashTrans.getTurqCashTransactionType().getId());
            returnBag.put(EngKeys.DOCUMENT_NO,cashTrans.getDocumentNo());
            returnBag.put(EngKeys.DATE,cashTrans.getTransactionDate());
            returnBag.put(EngKeys.DEFINITION,cashTrans.getTransactionDefinition());
            returnBag.put(EngKeys.ENG_SEQ_ID,cashTrans.getTurqEngineSequence().getId());
            
            TurqCurrentCard curCard = CashDALCashCard.getCurrentCard(cashTrans.getTurqEngineSequence());
            
            
            if (curCard != null)
            {
                returnBag.put(CurKeys.CUR_CURRENT_NAME,curCard.getCardsName());   
                returnBag.put(CurKeys.CUR_CURRENT_CODE,curCard.getCardsCurrentCode());  
            }
            
            returnBag.put(CashKeys.CASH_TRANSACTION_ROWS, new HashMap());
            
			if(cashTrans.getTurqCashTransactionType().getId().intValue()==EngBLCommon.CASH_TRANSFER_BETWEEN_CARDS)
			{
				Iterator it = cashTrans.getTurqCashTransactionRows().iterator(); 
				 int i = 0 ;
		            while (it.hasNext())
		            {

					
		                TurqCashTransactionRow row =   (TurqCashTransactionRow) it.next();
						
		/*               returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_CASH_CARD_NAME,row.getTurqCashCard().getCashCardName());
		                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT,row.getDeptAmountInForeignCurrency());
		                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT,row.getCreditAmountInForeignCurrency());
		                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_ABBREVATION,row.getTurqCurrencyExchangeRate().getTurqCurrencyByExchangeCurrencyId().getCurrenciesAbbreviation());
		                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,AccKeys.ACC_ACCOUNT_CODE,row.getTurqAccountingAccount().getAccountCode());
		               */ 
		                
						if(row.getCreditAmount().doubleValue()>0)
						{
						   returnBag.put(CashKeys.CASH_CARD_WITH_CREDIT,row.getTurqCashCard().getCashCardName());
						   returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT,row.getCreditAmountInForeignCurrency());
						}
						else
						{
							returnBag.put(CashKeys.CASH_CARD_WITH_DEPT,row.getTurqCashCard().getCashCardName());
							returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT,row.getDeptAmountInForeignCurrency());
						}		                
		               
		                returnBag.put(CashKeys.CASH_TRANS_ROW_ABBREVATION,row.getTurqCurrencyExchangeRate().getTurqCurrencyByExchangeCurrencyId().getCurrenciesAbbreviation());
		              
		            
		                i++;
		            }
		          
					return returnBag;
				
				
			}
			
			
			Iterator it = cashTrans.getTurqCashTransactionRows().iterator();            
            
            // if there is another line 
            int i = 0 ;
            while (it.hasNext())
            {

			
                TurqCashTransactionRow row =   (TurqCashTransactionRow) it.next();
				
/*                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_CASH_CARD_NAME,row.getTurqCashCard().getCashCardName());
                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT,row.getDeptAmountInForeignCurrency());
                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT,row.getCreditAmountInForeignCurrency());
                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,CashKeys.CASH_TRANS_ROW_ABBREVATION,row.getTurqCurrencyExchangeRate().getTurqCurrencyByExchangeCurrencyId().getCurrenciesAbbreviation());
                returnBag.put(CashKeys.CASH_TRANSACTION_ROWS,i,AccKeys.ACC_ACCOUNT_CODE,row.getTurqAccountingAccount().getAccountCode());
               */ 
                returnBag.put(CashKeys.CASH_TRANS_ROW_CASH_CARD_NAME,row.getTurqCashCard().getCashCardName());
                returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_DEPT_AMOUNT,row.getDeptAmountInForeignCurrency());
                returnBag.put(CashKeys.CASH_TRANS_ROW_FOREIGN_CREDIT_AMOUNT,row.getCreditAmountInForeignCurrency());
                returnBag.put(CashKeys.CASH_TRANS_ROW_ABBREVATION,row.getTurqCurrencyExchangeRate().getTurqCurrencyByExchangeCurrencyId().getCurrenciesAbbreviation());
                returnBag.put(AccKeys.ACC_ACCOUNT_CODE,row.getTurqAccountingAccount().getAccountCode());
            
                i++;
            }
            return returnBag;
                    
    }
    
	public static void initializeTransaction(HashMap argMap) throws Exception
	{
        
		TurqCashTransaction cashTrans = (TurqCashTransaction)argMap.get(CashKeys.CASH_TRANSACTION);
			CashDALCashCard.initiliazeCashTrans(cashTrans);
	
	}

	public static HashBag searchCashTransactions(HashMap argMap) throws Exception
    {
        
        HashBag listBag = new HashBag();
        
        Integer cashCardId = (Integer)argMap.get(CashKeys.CASH_CARD_ID);
        TurqCashCard cashCard=null;
        if(cashCardId!=null)
        {
            cashCard = (TurqCashCard)EngDALSessionFactory.getSession().load(TurqCashCard.class,cashCardId);
        }
        Date startDate = (Date)argMap.get(EngKeys.DATE_START);
        Date endDate = (Date)argMap.get(EngKeys.DATE_END);
        String definition = (String)argMap.get(EngKeys.DEFINITION);
        
        List transList =  CashDALCashCard.searchCashTransaction(cashCard, startDate, endDate, definition);
        
		listBag.put(CashKeys.CASH_TRANSACTIONS,new HashMap());
		
        Object [] row;
        for (int i = 0 ; i < transList.size(); i ++)
        {
            row = (Object[]) transList.get(i);
            
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,CashKeys.CASH_TRANSACTION_ID,(Integer) row[0]);
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,CashKeys.CASH_TRANS_TYPE_NAME,(String) row[1]);
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,EngKeys.DEPT_AMOUNT,(BigDecimal) row[2]);
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,EngKeys.CREDIT_AMOUNT,(BigDecimal) row[3]);
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,EngKeys.DATE,(Date) row[4]);
            listBag.put(CashKeys.CASH_TRANSACTIONS,i,EngKeys.DESCRIPTION,(String) row[5]);
            
        }
        
        return listBag;
    }
}@
