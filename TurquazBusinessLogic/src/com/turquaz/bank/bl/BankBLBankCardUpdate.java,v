head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.16.36.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.bank.bl;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author Ceday
 * @@version $Id: BankBLBankCardUpdate.java,v 1.2 2005/07/04 08:35:11 onsel Exp $
 */
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.hibernate.Session;

import server.util.EngDALSessionFactory;
import server.util.MyThreadLocal;
import server.util.SessionInfo;

import com.turquaz.bank.BankKeys;
import com.turquaz.bank.dal.BankDALBankCardUpdate;
import com.turquaz.bank.dal.BankDALCommon;
import com.turquaz.engine.EngKeys;
import com.turquaz.engine.dal.EngDALCommon;
import com.turquaz.engine.dal.TurqBanksCard;
import com.turquaz.engine.dal.TurqCurrency;
import com.turquaz.engine.exceptions.TurquazException;
import com.turquaz.engine.lang.BankLangKeys;

public class BankBLBankCardUpdate
{
	public static void updateBankCard(HashMap argMap) throws Exception
	{
		
		try
		{
			Integer bankCardId=(Integer)argMap.get(BankKeys.BANK_ID);
			
			Session session=EngDALSessionFactory.getSession();
			TurqBanksCard bankCard = (TurqBanksCard)session.load(TurqBanksCard.class,bankCardId);
			
			
			String bankName=(String)argMap.get(BankKeys.BANK_NAME);
			String bankBranchName=(String)argMap.get(BankKeys.BANK_BRANCH_NAME);
			String bankAccountNo=(String)argMap.get(BankKeys.BANK_ACCOUNT_NO);
			
			Integer currencyId=(Integer)argMap.get(EngKeys.CURRENCY_ID);
			String definition=(String)argMap.get(BankKeys.BANK_DEFINITION);
			String bankCode=(String)argMap.get(BankKeys.BANK_CODE);
			Map accountingAccounts=(Map)argMap.get(BankKeys.BANK_ACCOUNTING_ACCOUNTS);
			
			
			updateBankCardInfo( bankCard, bankName, bankBranchName, bankAccountNo, currencyId, definition, bankCode);
			if (!checkInitialTransaction( bankCard))
			{
				BankBLTransactionAdd.saveInitialBankTransaction(bankCard);
			}
			updateBankAccountingAccounts( bankCard, accountingAccounts);
		
			
		}
		catch (Exception ex)
		{
			
			throw ex;
		}
	}

	private static void updateBankCardInfo( TurqBanksCard bankCard, String bankName, String bankBranchName,
			String bankAccountNo, Integer currencyId, String definition, String bankCode) throws Exception
	{
		bankCard.setBankName(bankName);
		bankCard.setBankBranchName(bankBranchName);
		bankCard.setBankAccountNo(bankAccountNo);
		
		TurqCurrency currency=new TurqCurrency();
		currency.setId(currencyId);
		bankCard.setTurqCurrency(currency);
        
        SessionInfo info = MyThreadLocal.getSessionInfo();            
        String username =(String)info.get("username");
        
		bankCard.setUpdatedBy(username);
		Calendar cal = Calendar.getInstance();
		bankCard.setLastModified(cal.getTime());
		bankCard.setBankDefinition(definition);
		bankCard.setBankCode(bankCode);
		EngDALCommon.updateObject( bankCard);
	}

	private static boolean checkInitialTransaction( TurqBanksCard bankCard) throws Exception
	{
		try
		{
			return BankDALCommon.checkInitialTransaction( bankCard);
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	private static void updateBankAccountingAccounts(TurqBanksCard curCard, Map accounts) throws Exception
	{
		Iterator it = curCard.getTurqBankAccountingAccounts().iterator();
		while (it.hasNext())
		{
			EngDALCommon.deleteObject(it.next());
		}
		BankBLBankCardAdd.saveBankAccountingAccounts( curCard, accounts);
	}

	public static void deleteBankCard(HashMap argMap) throws Exception
	{
		try
		{
			Integer bankCardId=(Integer)argMap.get(BankKeys.BANK_ID);
			
			boolean hasTransaction=BankDALBankCardUpdate.hasTransaction(bankCardId);
			
			if (hasTransaction)
			{
				throw new TurquazException(BankLangKeys.MSG_HAS_TRANS_CAN_NOT_DELETE);
			}
		
			Session session=EngDALSessionFactory.getSession();
			TurqBanksCard bankCard = (TurqBanksCard)session.load(TurqBanksCard.class,bankCardId);
			
			
			
			Iterator it = bankCard.getTurqBankAccountingAccounts().iterator();
			while (it.hasNext())
			{
				EngDALCommon.deleteObject(it.next());
			}
			BankDALBankCardUpdate.deleteInitialTransaction(bankCard);
			EngDALCommon.deleteObject(bankCard);
			
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
}@
