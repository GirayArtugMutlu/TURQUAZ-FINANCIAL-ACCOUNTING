head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.01.22.16.36.34;	author huseyiner;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial commit
@
text
@package com.turquaz.current.dal;

/************************************************************************/
/* TURQUAZ: Higly Modular Accounting/ERP Program                        */
/* ============================================                         */
/* Copyright (c) 2004 by Turquaz Software Development Group			    */
/*																		*/
/* This program is free software. You can redistribute it and/or modify */
/* it under the terms of the GNU General Public License as published by */
/* the Free Software Foundation; either version 2 of the License, or    */
/* (at your option) any later version.       							*/
/* 																		*/
/* This program is distributed in the hope that it will be useful,		*/
/* but WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		*/
/* GNU General Public License for more details.         				*/
/************************************************************************/
/**
 * @@author  Onsel Armagan
 * @@version  $Id: CurDALCurrentCardSearch.java,v 1.4 2005/08/29 14:48:59 cem Exp $
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.hibernate.CacheMode;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;

import server.util.EngDALSessionFactory;

import com.turquaz.engine.bl.EngBLCommon;
import com.turquaz.engine.dal.TurqAccountingAccount;
import com.turquaz.engine.dal.TurqCurrentAccountingAccount;
import com.turquaz.engine.dal.TurqCurrentCard;
import com.turquaz.engine.dal.TurqCurrentGroup;
import com.turquaz.engine.dal.TurqViewCurrentAmountTotal;


public class CurDALCurrentCardSearch
{
	private static boolean isCurrentCardsDirty=true;
	
	
	public static boolean isCurrentCardsDirty() {
		return isCurrentCardsDirty;
	}

	public static void setCurrentCardsDirty(boolean isCurrentCardsDirty) {
		CurDALCurrentCardSearch.isCurrentCardsDirty = isCurrentCardsDirty;
	}
	

	public static List searchCurrentCards(String currentCode, String currentName, Integer cardGroupId) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select currentCard.id, currentCard.cardsCurrentCode, currentCard.cardsName," +
					" currentView.transactionsTotalCredit, currentView.transactionsTotalDept," +
					" currentView.transactionsBalanceNow "+
					" from TurqViewCurrentAmountTotal as currentView, TurqCurrentCard as currentCard";

		
			if (cardGroupId != null)
			{
				query += " left join  currentCard.turqCurrentCardsGroups as gr ";
			}
			query += " where currentCard.id=currentView.currentCardsId";
			if (!currentCode.equals(""))
			{
				query += " and currentCard.cardsCurrentCode like '" +currentCode+ "%'";
			}
			if (!currentName.equals(""))
			{
				query += " and currentCard.cardsName like '" + currentName + "%'";
			}
			query += " and currentCard.id <> -1";
			if (cardGroupId != null)
			{
				query += " and gr.turqCurrentGroup.id = :cardGroup";
			}
			query += " order by currentCard.cardsCurrentCode";
			Query q = session.createQuery(query);
			if (cardGroupId != null)
			{
				q.setParameter("cardGroup", cardGroupId);
			}
			List list = q.list();
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
	
	public static List getCurCardBalanceReport(String currentCode, String currentName, Integer cardGroupId,
			Date startDate, Date endDate, String definition) throws Exception
	{
		try
		{
			
			SimpleDateFormat df= new SimpleDateFormat("yyyy-MM-dd");
			String query="Select currentCard.id, currentCard.cards_current_code, currentCard.cards_name," +
					" transTable.transactionsTotalCredit, transTable.transactionsTotalDept" +
					" from turq_current_cards currentCard" +
					" left join (Select curTrans.current_cards_id,"+
					" sum(curTrans.transactions_total_credit) as transactionsTotalCredit," +
					" sum(curTrans.transactions_total_dept) as transactionsTotalDept" +
					" from turq_current_transactions as curTrans" +
					" where curTrans.transactions_date >= '" +df.format(startDate)+"'" +
					" and curTrans.transactions_date <= '" + df.format(endDate)+ "'";
			
			if (!definition.equals(""))
			{
				query += " and curTrans.transactions_definition like '"+definition+"%'";
			}
			query +=" group by curTrans.current_cards_id) transTable ON transTable.current_cards_id = currentCard.id" +
					" where currentCard.id <> -1";
				
			if (cardGroupId != null)
			{
				query += " and ("+cardGroupId.intValue()+ " in (select gr.current_groups_id from turq_current_cards_groups" +
						" gr where gr.current_cards_id=currentCard.id))";
			}

			if (!currentCode.equals(""))
			{
				query += " and currentCard.cards_current_code like '" +currentCode+ "%'";
			}
			if (!currentName.equals(""))
			{
				query += " and currentCard.cards_name like '" + currentName + "%'";
			}
			
			query += " and (transTable.transactionsTotalCredit > 0 or transTable.transactionsTotalDept > 0)";
			
			query += " order by currentCard.cards_current_code";
			
			Session session = EngDALSessionFactory.getSession();
			Statement statement=session.connection().createStatement();
			ResultSet rs=statement.executeQuery(query);
			
			List list=new ArrayList();
			
			while (rs.next())
			{
				Object[] info=new Object[6];
				info[0]=rs.getObject(1);
				info[1]=rs.getObject(2);
				info[2]=rs.getObject(3);
				
				if (rs.getObject(4)==null)
				{
					info[3]=new BigDecimal(0);
					info[4]=new BigDecimal(0);
					info[5]=new BigDecimal(0);
				}
				else
				{
					BigDecimal credit=(BigDecimal)rs.getObject(4);
					BigDecimal dept=(BigDecimal)rs.getObject(5);
					info[3]=credit;
					info[4]=dept;
					info[5]=credit.subtract(dept);
				}	
				
				list.add(info);
				
			}
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
	
	public static String getCurrentCardCode(Integer currentId) throws Exception
	{
		Session session = EngDALSessionFactory.getSession();
		String query = "Select currentCard.cardsCurrentCode from TurqCurrentCard as currentCard"
				+ " where currentCard.id=" + currentId;
		Query q = session.createQuery(query);
		List list = q.list();
		if (list.size() > 0)
			return (String) list.get(0);
		else
			return "";
	}
	
	public static String getCurrentCardName(Integer currentId) throws Exception
	{
		Session session = EngDALSessionFactory.getSession();
		String query = "Select currentCard.cardsName from TurqCurrentCard as currentCard"
				+ " where currentCard.id=" + currentId;
		Query q = session.createQuery(query);
		List list = q.list();
		if (list.size() > 0)
			return (String) list.get(0);
		else
			return "";
	}
	
	public static List searchCurrentCardsBalanceList(String currentCode, String currentName, TurqCurrentGroup cardGroup, Date startDate, Date endDate, String definition) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select currentCard.id, currentCard.cardsCurrentCode, currentCard.cardsName, sum(curTrans.transactionsTotalDept), " +
					" sum(curTrans.transactionsTotalCredit)"
					+ " from TurqCurrentTransaction curTrans, curTrans.turqCurrentCard as currentCard";
			if (cardGroup != null)
			{
				query += " left join  curTrans.turqCurrentCard.turqCurrentCardsGroups as gr ";
			}
			query += " where currentCard.id <> -1 and curTrans.transactionsDate >= :startDate and curTrans.transactionsDate <= :endDate";
			if (!currentCode.equals(""))
			{
				query +=" and currentCard.cardsCurrentCode like '" + currentCode+ "%'";
			}
			if (!currentName.equals(""))
			{
				query +=" and currentCard.cardsName like '" + currentName + "%'";
			}
			if (!definition.equals(""))
			{
				query +=" and curTrans.transactionsDefinition like '"+definition+"%'";
			}
			if (cardGroup != null)
			{
				query += " and gr.turqCurrentGroup = :cardGroup";
			}
			query += " group by currentCard.id, currentCard.cardsCurrentCode, currentCard.cardsName";
			query += " order by currentCard.cardsCurrentCode";
			Query q = session.createQuery(query);
			if (cardGroup != null)
			{
				q.setParameter("cardGroup", cardGroup);
			}
			q.setParameter("startDate",startDate);
			q.setParameter("endDate",endDate);
			List list = q.list();
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static TurqViewCurrentAmountTotal getCurrentCardView(Integer curCardId) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select currentView from TurqViewCurrentAmountTotal as currentView," + " where currentView.currentCardsId="
					+ curCardId;
			Query q = session.createQuery(query);
			List list = q.list();
			return ((TurqViewCurrentAmountTotal) list.get(0));
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static List getTransactions(TurqCurrentCard curCard) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select bankTrans from TurqCurrentTransaction as bankTrans" + " where bankTrans.turqCurrentCard.id="
					+ curCard.getId() + " and bankTrans.turqCurrentTransactionType.id <>" + EngBLCommon.CURRENT_TRANS_INITIAL;
			Query q = session.createQuery(query);
			List list = q.list();
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
	public static Boolean hasTransactions(TurqCurrentCard curCard) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select bankTrans from TurqCurrentTransaction as bankTrans" + " where bankTrans.turqCurrentCard.id="
					+ curCard.getId() + " and bankTrans.turqCurrentTransactionType.id <>" + EngBLCommon.CURRENT_TRANS_INITIAL;
			Query q = session.createQuery(query);
			q.setMaxResults(1);
			List list = q.list();
			if(list.size()>0)
			{
				return new Boolean(true);
			}
			else
			{
				return new Boolean(false);
			}
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static List getCurrentCards() throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select curCard.cardsCurrentCode, curCard.cardsName, curCard.id from TurqCurrentCard as curCard "
					+ " where curCard.id <> -1";
			Query q = session.createQuery(query);
			List list = q.list();
			q.setCacheable(true);
			if(isCurrentCardsDirty)
			{
				q.setCacheMode(CacheMode.REFRESH);
				isCurrentCardsDirty=false;
			}
			
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static List getCurrentCardsAndAccountingAccounts() throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select curCard.id, curCard.accounting_code_id from turq_current_cards curCard " + " where curCard.id <> -1";
			Statement stmt = session.connection().createStatement();
			ResultSet rs = stmt.executeQuery(query);
			List list = new ArrayList();
			while (rs.next())
			{
				Object[] result = new Object[2];
				result[0] = rs.getString(1);
				result[1] = rs.getString(2);
				list.add(result);
			}
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static TurqCurrentCard getCurrentCard(String cardCode) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "Select curCard from TurqCurrentCard as curCard " + " where curCard.cardsCurrentCode=:cardCode";
			Query q = session.createQuery(query);
			q.setParameter("cardCode", cardCode.trim());
			List list = q.list();
			if (list.size() > 0)
			{
				return (TurqCurrentCard) list.get(0);
			}
			else
			{
				return null;
			}
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static TurqCurrentCard initializeCurrentCard(Integer curCardId) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			TurqCurrentCard curCard = (TurqCurrentCard) session.load(TurqCurrentCard.class, curCardId);
			Hibernate.initialize(curCard.getTurqCurrentCardsPhones());
			Hibernate.initialize(curCard.getTurqCurrentContacts());
			Hibernate.initialize(curCard.getTurqCurrentCardsGroups());
			Hibernate.initialize(curCard.getTurqCurrentAccountingAccounts());
			return curCard;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	//TODO this method should be written
	public static TurqAccountingAccount getCurrentAccountingAccount(TurqCurrentCard curCard, Integer type) throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			
			curCard =(TurqCurrentCard)session.load(TurqCurrentCard.class,curCard.getId());
				
			Iterator it = curCard.getTurqCurrentAccountingAccounts().iterator();
			while (it.hasNext())
			{
				TurqCurrentAccountingAccount curAccount = (TurqCurrentAccountingAccount) it.next();
				if (curAccount.getTurqCurrentAccountingType().getId().intValue() == type.intValue())
				{
					return curAccount.getTurqAccountingAccount();
				}
			}
			return null;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static List getTurqCurrentGroups() throws Exception
	{
		try
		{
			Session session = EngDALSessionFactory.getSession();
			String query = "from TurqCurrentGroup as gr ";
			Query q = session.createQuery(query);
			List list = q.list();
			return list;
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}
}@
